import { createClient } from '@supabase/supabase-js';
import {
  Report,
  ReportSection,
  ReportDataSet,
  ReportRequest,
  DateRange,
  ChartConfig
} from '../types';
import { ExecutiveDashboard } from '../dashboard/ExecutiveDashboard';
import { MLModels } from '../ml/MLModels';

export class ReportGenerator {
  private supabase;
  private dashboard: ExecutiveDashboard;
  private mlModels: MLModels;

  constructor(supabaseUrl: string, supabaseKey: string) {
    this.supabase = createClient(supabaseUrl, supabaseKey);
    this.dashboard = new ExecutiveDashboard(supabaseUrl, supabaseKey);
    this.mlModels = new MLModels(supabaseUrl, supabaseKey);
  }

  async generateReport(request: ReportRequest): Promise<Report> {
    try {
      console.log(`üìã Gerando relat√≥rio: ${request.title}`);

      const reportId = `report_${Date.now()}`;
      const sections: ReportSection[] = [];
      const charts: ChartConfig[] = [];
      const dataSets: ReportDataSet[] = [];

      // Generate dashboard data
      const dashboardData = await this.dashboard.generateDashboard(request.period);

      // Generate requested sections
      for (const sectionType of request.sections) {
        const section = await this.generateSection(sectionType, dashboardData, request.period);
        if (section) {
          sections.push(section);
        }
      }

      // Generate charts
      const reportCharts = await this.generateCharts(dashboardData, request.period);
      charts.push(...reportCharts);

      // Generate data sets
      const reportDataSets = await this.generateDataSets(request.period);
      dataSets.push(...reportDataSets);

      const report: Report = {
        id: reportId,
        title: request.title,
        type: this.determineReportType(request.period),
        period: request.period,
        sections,
        charts,
        dataSets,
        generatedAt: new Date(),
        generatedBy: 'Sistema BI'
      };

      console.log(`‚úÖ Relat√≥rio gerado com sucesso: ${sections.length} se√ß√µes`);
      return report;

    } catch (error) {
      console.error('‚ùå Erro ao gerar relat√≥rio:', error);
      throw error;
    }
  }

  private async generateSection(
    sectionType: string,
    dashboardData: any,
    period: DateRange
  ): Promise<ReportSection | null> {
    switch (sectionType) {
      case 'executive_summary':
        return this.generateExecutiveSummary(dashboardData);
      case 'financial_analysis':
        return this.generateFinancialAnalysis(dashboardData.financial);
      case 'operational_metrics':
        return this.generateOperationalMetrics(dashboardData.operational);
      case 'clinical_outcomes':
        return this.generateClinicalOutcomes(dashboardData.clinical);
      case 'patient_insights':
        return this.generatePatientInsights(dashboardData.patient);
      case 'predictive_analytics':
        return await this.generatePredictiveAnalytics(period);
      case 'recommendations':
        return this.generateRecommendations(dashboardData);
      default:
        return null;
    }
  }

  private generateExecutiveSummary(dashboardData: any): ReportSection {
    const { financial, operational, clinical, patient } = dashboardData;

    const content = `
## Resumo Executivo

### Principais Indicadores do Per√≠odo

**Desempenho Financeiro:**
- Receita Total: R$ ${financial.totalRevenue.toLocaleString('pt-BR', { minimumFractionDigits: 2 })}
- Crescimento: ${financial.revenueGrowth.toFixed(1)}%
- Pacientes Pagantes: ${financial.payingPatients}
- Taxa de Cobran√ßa: ${financial.collectionRate.toFixed(1)}%

**Opera√ß√µes:**
- Total de Consultas: ${operational.totalAppointments}
- Crescimento de Consultas: ${operational.appointmentGrowth.toFixed(1)}%
- Taxa de Faltas: ${operational.noShowRate.toFixed(1)}%
- Utiliza√ß√£o dos Terapeutas: ${operational.therapistUtilization.toFixed(1)}%

**Resultados Cl√≠nicos:**
- Total de Tratamentos: ${clinical.totalTreatments}
- Taxa de Sucesso: ${clinical.successRate.toFixed(1)}%
- Redu√ß√£o M√©dia de Dor: ${clinical.avgPainReduction.toFixed(1)} pontos
- Satisfa√ß√£o dos Pacientes: ${clinical.patientSatisfaction.toFixed(1)}/10

**Pacientes:**
- Total de Pacientes: ${patient.totalPatients}
- Novos Pacientes: ${patient.newPatients}
- Taxa de Reten√ß√£o: ${patient.retentionRate.toFixed(1)}%
- Faixa Et√°ria Principal: ${patient.avgAgeGroup}

### Alertas Importantes
${dashboardData.alerts.length > 0 ?
  dashboardData.alerts.map((alert: any) => `- **${alert.title}**: ${alert.description}`).join('\n') :
  'Nenhum alerta cr√≠tico identificado no per√≠odo.'
}
    `;

    return {
      id: 'executive_summary',
      title: 'Resumo Executivo',
      type: 'summary',
      content: content.trim()
    };
  }

  private generateFinancialAnalysis(financial: any): ReportSection {
    const content = `
## An√°lise Financeira Detalhada

### Receita e Crescimento
- **Receita Total**: R$ ${financial.totalRevenue.toLocaleString('pt-BR', { minimumFractionDigits: 2 })}
- **Crescimento**: ${financial.revenueGrowth >= 0 ? '+' : ''}${financial.revenueGrowth.toFixed(1)}%
- **Ticket M√©dio**: R$ ${financial.avgTransactionValue.toLocaleString('pt-BR', { minimumFractionDigits: 2 })}

### Indicadores de Cobran√ßa
- **Taxa de Cobran√ßa**: ${financial.collectionRate.toFixed(1)}%
- **Taxa de Inadimpl√™ncia**: ${financial.overdueRate.toFixed(1)}%
- **Pacientes Pagantes**: ${financial.payingPatients}

### An√°lise de Performance
${financial.revenueGrowth > 10 ?
  '‚úÖ **Crescimento Excelente**: A receita apresenta crescimento muito positivo.' :
  financial.revenueGrowth > 0 ?
  'üî∂ **Crescimento Moderado**: Receita em crescimento, mas com potencial de melhoria.' :
  'üî¥ **Aten√ß√£o Necess√°ria**: Receita em decl√≠nio, requer a√ß√µes imediatas.'
}

${financial.collectionRate > 90 ?
  '‚úÖ **Cobran√ßa Eficiente**: Taxa de cobran√ßa excelente.' :
  financial.collectionRate > 75 ?
  'üî∂ **Cobran√ßa Adequada**: Taxa de cobran√ßa satisfat√≥ria, mas pode melhorar.' :
  'üî¥ **Cobran√ßa Deficiente**: Taxa de cobran√ßa baixa, requer aten√ß√£o imediata.'
}

### Recomenda√ß√µes Financeiras
- ${financial.revenueGrowth < 0 ? 'Implementar estrat√©gias de recupera√ß√£o de receita' : 'Manter estrat√©gias de crescimento atuais'}
- ${financial.overdueRate > 15 ? 'Melhorar processos de cobran√ßa e follow-up' : 'Manter controle sobre inadimpl√™ncia'}
- ${financial.avgTransactionValue < 100 ? 'Avaliar reajuste de pre√ßos ou pacotes de servi√ßos' : 'Ticket m√©dio adequado'}
    `;

    return {
      id: 'financial_analysis',
      title: 'An√°lise Financeira',
      type: 'analysis',
      content: content.trim(),
      data: financial
    };
  }

  private generateOperationalMetrics(operational: any): ReportSection {
    const content = `
## M√©tricas Operacionais

### Volume de Atendimento
- **Total de Consultas**: ${operational.totalAppointments}
- **Crescimento**: ${operational.appointmentGrowth >= 0 ? '+' : ''}${operational.appointmentGrowth.toFixed(1)}%
- **Dura√ß√£o M√©dia da Sess√£o**: ${operational.avgSessionDuration.toFixed(0)} minutos

### Efici√™ncia Operacional
- **Taxa de Faltas**: ${operational.noShowRate.toFixed(1)}%
- **Taxa de Cancelamentos**: ${operational.cancellationRate.toFixed(1)}%
- **Utiliza√ß√£o dos Terapeutas**: ${operational.therapistUtilization.toFixed(1)}%

### An√°lise de Performance Operacional
${operational.noShowRate < 10 ?
  '‚úÖ **Taxa de Faltas Baixa**: Excelente controle de no-shows.' :
  operational.noShowRate < 20 ?
  'üî∂ **Taxa de Faltas Moderada**: H√° espa√ßo para melhorias.' :
  'üî¥ **Taxa de Faltas Alta**: Requer a√ß√£o imediata.'
}

${operational.therapistUtilization > 80 ?
  'üî¥ **Sobrecarga**: Terapeutas podem estar sobrecarregados.' :
  operational.therapistUtilization > 60 ?
  '‚úÖ **Utiliza√ß√£o Ideal**: Boa utiliza√ß√£o dos recursos.' :
  'üî∂ **Subutiliza√ß√£o**: Potencial para mais atendimentos.'
}

### Recomenda√ß√µes Operacionais
- ${operational.noShowRate > 15 ? 'Implementar sistema de lembretes automatizados' : 'Manter sistema atual de confirma√ß√µes'}
- ${operational.therapistUtilization > 85 ? 'Considerar contrata√ß√£o de novos terapeutas' : 'Utiliza√ß√£o adequada da equipe'}
- ${operational.cancellationRate > 10 ? 'Revisar pol√≠tica de cancelamentos' : 'Taxa de cancelamentos sob controle'}
    `;

    return {
      id: 'operational_metrics',
      title: 'M√©tricas Operacionais',
      type: 'metrics',
      content: content.trim(),
      data: operational
    };
  }

  private generateClinicalOutcomes(clinical: any): ReportSection {
    const content = `
## Resultados Cl√≠nicos

### Efetividade dos Tratamentos
- **Total de Tratamentos**: ${clinical.totalTreatments}
- **Taxa de Sucesso**: ${clinical.successRate.toFixed(1)}%
- **Redu√ß√£o M√©dia de Dor**: ${clinical.avgPainReduction.toFixed(1)} pontos (escala 0-10)
- **Dura√ß√£o M√©dia do Tratamento**: ${clinical.avgTreatmentDuration.toFixed(0)} minutos

### Satisfa√ß√£o dos Pacientes
- **Satisfa√ß√£o M√©dia**: ${clinical.patientSatisfaction.toFixed(1)}/10
- **Sess√µes por Tratamento**: ${clinical.avgSessionsPerTreatment.toFixed(1)}

### An√°lise de Qualidade Cl√≠nica
${clinical.successRate > 75 ?
  '‚úÖ **Excelente Efetividade**: Taxa de sucesso muito boa.' :
  clinical.successRate > 60 ?
  'üî∂ **Efetividade Moderada**: Resultados satisfat√≥rios com potencial de melhoria.' :
  'üî¥ **Baixa Efetividade**: Requer revis√£o dos protocolos de tratamento.'
}

${clinical.patientSatisfaction > 8 ?
  '‚úÖ **Alta Satisfa√ß√£o**: Pacientes muito satisfeitos com os resultados.' :
  clinical.patientSatisfaction > 6 ?
  'üî∂ **Satisfa√ß√£o Moderada**: Boa satisfa√ß√£o, mas pode melhorar.' :
  'üî¥ **Baixa Satisfa√ß√£o**: Requer aten√ß√£o imediata √† qualidade do atendimento.'
}

### Recomenda√ß√µes Cl√≠nicas
- ${clinical.successRate < 70 ? 'Revisar e atualizar protocolos de tratamento' : 'Manter protocolos atuais de tratamento'}
- ${clinical.patientSatisfaction < 7 ? 'Implementar programa de melhoria da experi√™ncia do paciente' : 'Manter foco na satisfa√ß√£o do paciente'}
- ${clinical.avgSessionsPerTreatment > 10 ? 'Avaliar efici√™ncia dos tratamentos prolongados' : 'Dura√ß√£o dos tratamentos adequada'}
    `;

    return {
      id: 'clinical_outcomes',
      title: 'Resultados Cl√≠nicos',
      type: 'analysis',
      content: content.trim(),
      data: clinical
    };
  }

  private generatePatientInsights(patient: any): ReportSection {
    const content = `
## An√°lise de Pacientes

### Demografia dos Pacientes
- **Total de Pacientes**: ${patient.totalPatients}
- **Novos Pacientes**: ${patient.newPatients}
- **Pacientes Ativos**: ${patient.activePatients}
- **Faixa Et√°ria Principal**: ${patient.avgAgeGroup}

### Reten√ß√£o e Engajamento
- **Taxa de Reten√ß√£o**: ${patient.retentionRate.toFixed(1)}%
- **Taxa de Indica√ß√£o**: ${patient.referralRate.toFixed(1)}%

### An√°lise de Crescimento da Base
${patient.newPatients > patient.totalPatients * 0.1 ?
  '‚úÖ **Crescimento Saud√°vel**: Boa aquisi√ß√£o de novos pacientes.' :
  patient.newPatients > patient.totalPatients * 0.05 ?
  'üî∂ **Crescimento Moderado**: Aquisi√ß√£o moderada de novos pacientes.' :
  'üî¥ **Baixo Crescimento**: Necess√°rio melhorar estrat√©gias de aquisi√ß√£o.'
}

${patient.retentionRate > 80 ?
  '‚úÖ **Alta Reten√ß√£o**: Excelente fideliza√ß√£o de pacientes.' :
  patient.retentionRate > 60 ?
  'üî∂ **Reten√ß√£o Moderada**: Boa reten√ß√£o, mas pode melhorar.' :
  'üî¥ **Baixa Reten√ß√£o**: Requer a√ß√µes para melhorar fideliza√ß√£o.'
}

### Recomenda√ß√µes para Pacientes
- ${patient.retentionRate < 60 ? 'Implementar programa de fideliza√ß√£o' : 'Manter estrat√©gias de reten√ß√£o atuais'}
- ${patient.newPatients < patient.totalPatients * 0.05 ? 'Investir em marketing e parcerias' : 'Continuar estrat√©gias de aquisi√ß√£o'}
- ${patient.referralRate < 5 ? 'Criar programa de indica√ß√µes' : 'Manter programa de indica√ß√µes ativo'}
    `;

    return {
      id: 'patient_insights',
      title: 'An√°lise de Pacientes',
      type: 'analysis',
      content: content.trim(),
      data: patient
    };
  }

  private async generatePredictiveAnalytics(period: DateRange): Promise<ReportSection> {
    try {
      const anomalies = await this.mlModels.detectAnomalies(period);

      const content = `
## Analytics Preditivos

### Detec√ß√£o de Anomalias
${anomalies.length > 0 ?
  anomalies.map(anomaly =>
    `**${anomaly.affectedMetric}**: ${anomaly.description} (Desvio: ${anomaly.deviation.toFixed(1)}%)`
  ).join('\n') :
  'Nenhuma anomalia significativa detectada no per√≠odo.'
}

### Previs√µes e Tend√™ncias
- **Risco de No-Show**: Monitoramento ativo implementado
- **Previs√£o de Resultados**: Modelos preditivos operacionais
- **Detec√ß√£o de Padr√µes**: Sistema de alertas autom√°ticos ativo

### Insights de Machine Learning
${anomalies.filter(a => a.severity === 'critical').length > 0 ?
  'üî¥ **Aten√ß√£o**: Anomalias cr√≠ticas detectadas que requerem a√ß√£o imediata.' :
  anomalies.filter(a => a.severity === 'high').length > 0 ?
  'üî∂ **Monitoramento**: Anomalias de alta severidade identificadas.' :
  '‚úÖ **Normal**: Opera√ß√£o dentro dos padr√µes esperados.'
}

### Recomenda√ß√µes Baseadas em IA
${anomalies.length > 0 ?
  anomalies.slice(0, 3).map(anomaly =>
    anomaly.recommendations[0]
  ).join('\n- ') :
  '- Continuar monitoramento com modelos preditivos\n- Manter coleta de dados para aprimoramento dos modelos'
}
      `;

      return {
        id: 'predictive_analytics',
        title: 'Analytics Preditivos',
        type: 'analysis',
        content: content.trim(),
        data: { anomalies }
      };

    } catch (error) {
      return {
        id: 'predictive_analytics',
        title: 'Analytics Preditivos',
        type: 'analysis',
        content: 'Erro ao gerar an√°lise preditiva. Dados insuficientes ou sistema indispon√≠vel.',
        data: {}
      };
    }
  }

  private generateRecommendations(dashboardData: any): ReportSection {
    const recommendations: string[] = [];

    // Financial recommendations
    if (dashboardData.financial.revenueGrowth < 0) {
      recommendations.push('**Financeiro**: Implementar estrat√©gias de recupera√ß√£o de receita');
    }
    if (dashboardData.financial.overdueRate > 15) {
      recommendations.push('**Financeiro**: Melhorar processos de cobran√ßa');
    }

    // Operational recommendations
    if (dashboardData.operational.noShowRate > 15) {
      recommendations.push('**Operacional**: Implementar sistema de lembretes autom√°ticos');
    }
    if (dashboardData.operational.therapistUtilization > 85) {
      recommendations.push('**Operacional**: Considerar expans√£o da equipe');
    }

    // Clinical recommendations
    if (dashboardData.clinical.successRate < 70) {
      recommendations.push('**Cl√≠nico**: Revisar protocolos de tratamento');
    }
    if (dashboardData.clinical.patientSatisfaction < 7) {
      recommendations.push('**Cl√≠nico**: Melhorar experi√™ncia do paciente');
    }

    // Patient recommendations
    if (dashboardData.patient.retentionRate < 60) {
      recommendations.push('**Pacientes**: Implementar programa de fideliza√ß√£o');
    }
    if (dashboardData.patient.referralRate < 5) {
      recommendations.push('**Pacientes**: Criar programa de indica√ß√µes');
    }

    const content = `
## Recomenda√ß√µes Estrat√©gicas

### A√ß√µes Priorit√°rias
${recommendations.length > 0 ?
  recommendations.map(rec => `- ${rec}`).join('\n') :
  '- Manter estrat√©gias atuais\n- Continuar monitoramento de indicadores\n- Focar na melhoria cont√≠nua'
}

### Implementa√ß√£o Sugerida
1. **Curto Prazo (1-30 dias)**: A√ß√µes corretivas imediatas
2. **M√©dio Prazo (1-3 meses)**: Implementa√ß√£o de melhorias operacionais
3. **Longo Prazo (3-6 meses)**: Estrat√©gias de crescimento e expans√£o

### M√©tricas de Acompanhamento
- Monitorar indicadores mensalmente
- Revisar efetividade das a√ß√µes implementadas
- Ajustar estrat√©gias baseado nos resultados
    `;

    return {
      id: 'recommendations',
      title: 'Recomenda√ß√µes',
      type: 'recommendations',
      content: content.trim(),
      data: { recommendations }
    };
  }

  private async generateCharts(dashboardData: any, period: DateRange): Promise<ChartConfig[]> {
    const charts: ChartConfig[] = [];

    // Revenue trend chart
    const revenueChart: ChartConfig = {
      id: 'revenue_trend',
      type: 'line',
      title: 'Tend√™ncia de Receita',
      data: {
        labels: ['Per√≠odo Anterior', 'Per√≠odo Atual'],
        datasets: [{
          label: 'Receita (R$)',
          data: [
            dashboardData.financial.totalRevenue / (1 + dashboardData.financial.revenueGrowth/100),
            dashboardData.financial.totalRevenue
          ],
          borderColor: '#10b981',
          backgroundColor: '#10b98120',
          fill: true
        }]
      },
      options: {
        responsive: true,
        plugins: {
          title: { display: true, text: 'Evolu√ß√£o da Receita' },
          legend: { display: true, position: 'top' }
        }
      }
    };
    charts.push(revenueChart);

    // KPI overview pie chart
    const kpiChart: ChartConfig = {
      id: 'operational_kpis',
      type: 'pie',
      title: 'Distribui√ß√£o Operacional',
      data: {
        labels: ['Consultas Realizadas', 'Faltas', 'Cancelamentos'],
        datasets: [{
          label: 'Distribui√ß√£o',
          data: [
            dashboardData.operational.totalAppointments * (100 - dashboardData.operational.noShowRate - dashboardData.operational.cancellationRate) / 100,
            dashboardData.operational.totalAppointments * dashboardData.operational.noShowRate / 100,
            dashboardData.operational.totalAppointments * dashboardData.operational.cancellationRate / 100
          ],
          backgroundColor: ['#10b981', '#f59e0b', '#ef4444']
        }]
      },
      options: {
        responsive: true,
        plugins: {
          title: { display: true, text: 'Status das Consultas' },
          legend: { display: true, position: 'bottom' }
        }
      }
    };
    charts.push(kpiChart);

    return charts;
  }

  private async generateDataSets(period: DateRange): Promise<ReportDataSet[]> {
    const dataSets: ReportDataSet[] = [];

    // Financial transactions summary
    const { data: financialData } = await this.supabase
      .from('fact_financial_transactions')
      .select('transaction_date, net_amount, payment_method, status')
      .gte('transaction_date', period.start.toISOString())
      .lte('transaction_date', period.end.toISOString())
      .limit(100);

    if (financialData && financialData.length > 0) {
      dataSets.push({
        name: 'Transa√ß√µes Financeiras',
        headers: ['Data', 'Valor', 'M√©todo', 'Status'],
        rows: financialData.map(row => [
          new Date(row.transaction_date).toLocaleDateString('pt-BR'),
          `R$ ${row.net_amount.toFixed(2)}`,
          row.payment_method,
          row.status
        ])
      });
    }

    // Appointments summary
    const { data: appointmentData } = await this.supabase
      .from('fact_appointments')
      .select('appointment_date, status, duration_minutes, is_no_show, is_cancelled')
      .gte('appointment_date', period.start.toISOString())
      .lte('appointment_date', period.end.toISOString())
      .limit(100);

    if (appointmentData && appointmentData.length > 0) {
      dataSets.push({
        name: 'Consultas',
        headers: ['Data', 'Status', 'Dura√ß√£o (min)', 'Faltou', 'Cancelou'],
        rows: appointmentData.map(row => [
          new Date(row.appointment_date).toLocaleDateString('pt-BR'),
          row.status,
          row.duration_minutes?.toString() || '0',
          row.is_no_show ? 'Sim' : 'N√£o',
          row.is_cancelled ? 'Sim' : 'N√£o'
        ])
      });
    }

    return dataSets;
  }

  private determineReportType(period: DateRange): 'daily' | 'weekly' | 'monthly' | 'custom' {
    const duration = period.end.getTime() - period.start.getTime();
    const days = duration / (1000 * 60 * 60 * 24);

    if (days <= 1) return 'daily';
    if (days <= 7) return 'weekly';
    if (days <= 31) return 'monthly';
    return 'custom';
  }

  async scheduleAutomatedReports(schedules: {
    reportType: string;
    frequency: 'daily' | 'weekly' | 'monthly';
    recipients: string[];
    format: 'pdf' | 'excel' | 'html';
  }[]): Promise<void> {
    // In a real implementation, this would integrate with a job scheduler
    console.log('üìÖ Agendamento de relat√≥rios automatizados configurado');
    console.log(`Configurados ${schedules.length} relat√≥rios autom√°ticos`);

    // Store schedule configuration in database
    for (const schedule of schedules) {
      const { error } = await this.supabase
        .from('report_schedules')
        .upsert({
          report_type: schedule.reportType,
          frequency: schedule.frequency,
          recipients: schedule.recipients,
          format: schedule.format,
          is_active: true,
          created_at: new Date(),
          updated_at: new Date()
        });

      if (error) {
        console.error('Erro ao salvar agendamento:', error);
      }
    }
  }

  async getScheduledReports(): Promise<any[]> {
    const { data, error } = await this.supabase
      .from('report_schedules')
      .select('*')
      .eq('is_active', true);

    if (error) {
      console.error('Erro ao buscar relat√≥rios agendados:', error);
      return [];
    }

    return data || [];
  }

  async executeScheduledReport(scheduleId: string): Promise<void> {
    // Implementation for executing a scheduled report
    console.log(`üîÑ Executando relat√≥rio agendado: ${scheduleId}`);
  }
}