/**
 * üß† AI Prompt Manager - Gerenciador de Prompts Especializados
 * 
 * Sistema centralizado para gerenciar os 8 prompts especializados:
 * 1. An√°lise de Casos Cl√≠nicos
 * 2. Prescri√ß√£o de Exerc√≠cios
 * 3. Relat√≥rios de Evolu√ß√£o
 * 4. Diagn√≥stico Diferencial
 * 5. Protocolos de Tratamento
 * 6. An√°lise de Efetividade
 * 7. Educa√ß√£o de Estagi√°rios
 * 8. Comunica√ß√£o com Pacientes
 */

import { Patient, Appointment, User } from '../../types';

export interface PromptRequest {
  type: PromptType;
  context: PromptContext;
  data: any;
  preferences?: PromptPreferences;
}

export interface PromptResponse {
  content: string;
  confidence: number;
  reasoning: string[];
  suggestions: string[];
  metadata: PromptMetadata;
}

export interface PromptContext {
  patient?: Patient;
  appointment?: Appointment;
  therapist?: User;
  clinicalData?: any;
  sessionData?: any;
  treatmentHistory?: any;
}

export interface PromptPreferences {
  language: 'pt' | 'en' | 'es';
  detailLevel: 'basic' | 'intermediate' | 'advanced';
  format: 'text' | 'structured' | 'json';
  includeEvidence: boolean;
  includeRecommendations: boolean;
}

export interface PromptMetadata {
  promptVersion: string;
  processingTime: number;
  tokensUsed: number;
  modelUsed: string;
  timestamp: Date;
}

export type PromptType = 
  | 'clinical_analysis'
  | 'exercise_prescription'
  | 'evolution_report'
  | 'differential_diagnosis'
  | 'treatment_protocols'
  | 'effectiveness_analysis'
  | 'student_education'
  | 'patient_communication';

export class AIPromptManager {
  private prompts: Map<PromptType, PromptTemplate> = new Map();
  private strategies: Map<string, PromptStrategy> = new Map();
  
  constructor() {
    this.initializePrompts();
    this.initializeStrategies();
  }

  /**
   * Processar prompt especializado
   */
  async processPrompt(request: PromptRequest): Promise<PromptResponse> {
    try {
      console.log(`üß† Processando prompt ${request.type}...`);
      
      const startTime = Date.now();
      
      // Obter template do prompt
      const template = this.prompts.get(request.type);
      if (!template) {
        throw new Error(`Prompt ${request.type} n√£o encontrado`);
      }
      
      // Aplicar estrat√©gias avan√ßadas
      const enhancedPrompt = await this.applyAdvancedStrategies(template, request);
      
      // Processar com IA
      const response = await this.executePrompt(enhancedPrompt, request);
      
      // Calcular m√©tricas
      const processingTime = Date.now() - startTime;
      const metadata: PromptMetadata = {
        promptVersion: template.version,
        processingTime,
        tokensUsed: this.estimateTokens(enhancedPrompt),
        modelUsed: 'gpt-4',
        timestamp: new Date()
      };
      
      console.log(`‚úÖ Prompt ${request.type} processado em ${processingTime}ms`);
      
      return {
        ...response,
        metadata
      };
      
    } catch (error) {
      console.error(`‚ùå Erro ao processar prompt ${request.type}:`, error);
      throw error;
    }
  }

  /**
   * Processar m√∫ltiplos prompts
   */
  async processMultiplePrompts(requests: PromptRequest[]): Promise<PromptResponse[]> {
    const responses: PromptResponse[] = [];
    
    for (const request of requests) {
      try {
        const response = await this.processPrompt(request);
        responses.push(response);
      } catch (error) {
        console.warn(`‚ö†Ô∏è Erro ao processar prompt ${request.type}:`, error);
        // Continuar com pr√≥ximos prompts
      }
    }
    
    return responses;
  }

  /**
   * Obter template de prompt
   */
  getPromptTemplate(type: PromptType): PromptTemplate | undefined {
    return this.prompts.get(type);
  }

  /**
   * Atualizar template de prompt
   */
  updatePromptTemplate(type: PromptType, template: PromptTemplate): void {
    this.prompts.set(type, template);
  }

  /**
   * Aplicar estrat√©gias avan√ßadas
   */
  private async applyAdvancedStrategies(
    template: PromptTemplate,
    request: PromptRequest
  ): Promise<string> {
    let enhancedPrompt = template.content;
    
    // Aplicar Chain-of-Thought
    if (template.strategies.includes('chain_of_thought')) {
      enhancedPrompt = await this.applyChainOfThought(enhancedPrompt, request);
    }
    
    // Aplicar Few-Shot Learning
    if (template.strategies.includes('few_shot_learning')) {
      enhancedPrompt = await this.applyFewShotLearning(enhancedPrompt, request);
    }
    
    // Aplicar Role-Playing
    if (template.strategies.includes('role_playing')) {
      enhancedPrompt = await this.applyRolePlaying(enhancedPrompt, request);
    }
    
    // Aplicar Structured Output
    if (template.strategies.includes('structured_output')) {
      enhancedPrompt = await this.applyStructuredOutput(enhancedPrompt, request);
    }
    
    // Aplicar Context Optimization
    if (template.strategies.includes('context_optimization')) {
      enhancedPrompt = await this.applyContextOptimization(enhancedPrompt, request);
    }
    
    return enhancedPrompt;
  }

  /**
   * Aplicar Chain-of-Thought
   */
  private async applyChainOfThought(prompt: string, request: PromptRequest): Promise<string> {
    const chainOfThoughtStrategy = this.strategies.get('chain_of_thought');
    if (!chainOfThoughtStrategy) return prompt;
    
    const reasoningSteps = chainOfThoughtStrategy.generateReasoningSteps(request);
    
    return `${prompt}\n\n## Racioc√≠nio Cl√≠nico Sistem√°tico:\n${reasoningSteps.map((step, index) => 
      `${index + 1}. ${step}`
    ).join('\n')}\n\nBaseado neste racioc√≠nio sistem√°tico, forne√ßa sua an√°lise:`;
  }

  /**
   * Aplicar Few-Shot Learning
   */
  private async applyFewShotLearning(prompt: string, request: PromptRequest): Promise<string> {
    const fewShotStrategy = this.strategies.get('few_shot_learning');
    if (!fewShotStrategy) return prompt;
    
    const examples = fewShotStrategy.generateExamples(request);
    
    return `${prompt}\n\n## Exemplos Contextualizados:\n${examples}\n\nCom base nestes exemplos, analise o caso atual:`;
  }

  /**
   * Aplicar Role-Playing
   */
  private async applyRolePlaying(prompt: string, request: PromptRequest): Promise<string> {
    const rolePlayingStrategy = this.strategies.get('role_playing');
    if (!rolePlayingStrategy) return prompt;
    
    const persona = rolePlayingStrategy.generatePersona(request);
    
    return `Voc√™ √© ${persona.name}, ${persona.description}.\n\n${prompt}\n\nResponda como ${persona.name}:`;
  }

  /**
   * Aplicar Structured Output
   */
  private async applyStructuredOutput(prompt: string, request: PromptRequest): Promise<string> {
    const structuredOutputStrategy = this.strategies.get('structured_output');
    if (!structuredOutputStrategy) return prompt;
    
    const outputFormat = structuredOutputStrategy.generateOutputFormat(request);
    
    return `${prompt}\n\n## Formato de Resposta:\nResponda no seguinte formato JSON:\n\`\`\`json\n${outputFormat}\n\`\`\``;
  }

  /**
   * Aplicar Context Optimization
   */
  private async applyContextOptimization(prompt: string, request: PromptRequest): Promise<string> {
    const contextOptimizationStrategy = this.strategies.get('context_optimization');
    if (!contextOptimizationStrategy) return prompt;
    
    const optimizedContext = contextOptimizationStrategy.optimizeContext(request);
    
    return `${optimizedContext}\n\n${prompt}`;
  }

  /**
   * Executar prompt com IA
   */
  private async executePrompt(prompt: string, request: PromptRequest): Promise<Omit<PromptResponse, 'metadata'>> {
    // Simular execu√ß√£o com IA (implementar integra√ß√£o real)
    const response = await this.simulateAIResponse(prompt, request);
    
    return {
      content: response.content,
      confidence: response.confidence,
      reasoning: response.reasoning,
      suggestions: response.suggestions
    };
  }

  /**
   * Simular resposta de IA (para desenvolvimento)
   */
  private async simulateAIResponse(prompt: string, request: PromptRequest): Promise<{
    content: string;
    confidence: number;
    reasoning: string[];
    suggestions: string[];
  }> {
    // Simular processamento
    await new Promise(resolve => setTimeout(resolve, 1000));
    
    const template = this.prompts.get(request.type);
    const baseResponse = template?.defaultResponse || 'Resposta gerada pela IA';
    
    return {
      content: baseResponse,
      confidence: 0.85,
      reasoning: ['An√°lise baseada em evid√™ncias cient√≠ficas', 'Considera√ß√£o de fatores cl√≠nicos'],
      suggestions: ['Sugest√£o 1', 'Sugest√£o 2', 'Sugest√£o 3']
    };
  }

  /**
   * Estimar tokens utilizados
   */
  private estimateTokens(text: string): number {
    // Estimativa simples: ~4 caracteres por token
    return Math.ceil(text.length / 4);
  }

  /**
   * Inicializar prompts especializados
   */
  private initializePrompts(): void {
    // Prompt 1: An√°lise de Casos Cl√≠nicos
    this.prompts.set('clinical_analysis', {
      id: 'clinical_analysis',
      name: 'An√°lise de Casos Cl√≠nicos',
      version: '1.0.0',
      description: 'An√°lise sistem√°tica de casos cl√≠nicos com racioc√≠nio cl√≠nico estruturado',
      strategies: ['chain_of_thought', 'role_playing', 'structured_output'],
      content: `Analise o seguinte caso cl√≠nico de forma sistem√°tica e estruturada:

**Dados do Paciente:**
- Nome: {{patient.name}}
- Idade: {{patient.age}}
- Condi√ß√£o principal: {{clinicalData.condition}}
- Sintomas: {{clinicalData.symptoms}}
- Hist√≥rico m√©dico: {{clinicalData.history}}

**Objetivo:** Fornecer an√°lise cl√≠nica detalhada com diagn√≥stico diferencial e plano de tratamento.`,
      defaultResponse: 'An√°lise cl√≠nica detalhada ser√° fornecida...',
      examples: []
    });

    // Prompt 2: Prescri√ß√£o de Exerc√≠cios
    this.prompts.set('exercise_prescription', {
      id: 'exercise_prescription',
      name: 'Prescri√ß√£o de Exerc√≠cios',
      version: '1.0.0',
      description: 'Prescri√ß√£o personalizada de exerc√≠cios fisioterap√™uticos',
      strategies: ['few_shot_learning', 'structured_output', 'context_optimization'],
      content: `Prescreva exerc√≠cios fisioterap√™uticos personalizados para o paciente:

**Perfil do Paciente:**
- Condi√ß√£o: {{clinicalData.condition}}
- Limita√ß√µes: {{clinicalData.limitations}}
- Objetivos: {{clinicalData.goals}}
- Equipamentos dispon√≠veis: {{clinicalData.equipment}}

**Objetivo:** Criar protocolo de exerc√≠cios progressivo e personalizado.`,
      defaultResponse: 'Protocolo de exerc√≠cios ser√° prescrito...',
      examples: []
    });

    // Prompt 3: Relat√≥rios de Evolu√ß√£o
    this.prompts.set('evolution_report', {
      id: 'evolution_report',
      name: 'Relat√≥rios de Evolu√ß√£o',
      version: '1.0.0',
      description: 'Gera√ß√£o de relat√≥rios de evolu√ß√£o padronizados',
      strategies: ['structured_output', 'context_optimization'],
      content: `Gere relat√≥rio de evolu√ß√£o padronizado:

**Dados da Sess√£o:**
- Data: {{appointment.startTime}}
- Terapeuta: {{therapist.name}}
- Tipo de sess√£o: {{appointment.type}}
- Objetivos da sess√£o: {{sessionData.objectives}}
- Resultados obtidos: {{sessionData.results}}

**Objetivo:** Relat√≥rio estruturado seguindo padr√µes COFFITO.`,
      defaultResponse: 'Relat√≥rio de evolu√ß√£o ser√° gerado...',
      examples: []
    });

    // Prompt 4: Diagn√≥stico Diferencial
    this.prompts.set('differential_diagnosis', {
      id: 'differential_diagnosis',
      name: 'Diagn√≥stico Diferencial',
      version: '1.0.0',
      description: 'Diagn√≥stico diferencial baseado em evid√™ncias',
      strategies: ['chain_of_thought', 'structured_output', 'role_playing'],
      content: `Realize diagn√≥stico diferencial sistem√°tico:

**Apresenta√ß√£o Cl√≠nica:**
- Sintomas principais: {{clinicalData.mainSymptoms}}
- Sintomas secund√°rios: {{clinicalData.secondarySymptoms}}
- Exame f√≠sico: {{clinicalData.physicalExam}}
- Testes realizados: {{clinicalData.tests}}

**Objetivo:** Diagn√≥stico diferencial com classifica√ß√£o GRADE.`,
      defaultResponse: 'Diagn√≥stico diferencial ser√° realizado...',
      examples: []
    });

    // Prompt 5: Protocolos de Tratamento
    this.prompts.set('treatment_protocols', {
      id: 'treatment_protocols',
      name: 'Protocolos de Tratamento',
      version: '1.0.0',
      description: 'Desenvolvimento de protocolos baseados em evid√™ncias',
      strategies: ['few_shot_learning', 'structured_output', 'context_optimization'],
      content: `Desenvolva protocolo de tratamento baseado em evid√™ncias:

**Condi√ß√£o:**
- Diagn√≥stico: {{clinicalData.diagnosis}}
- Severidade: {{clinicalData.severity}}
- Fatores progn√≥sticos: {{clinicalData.prognosticFactors}}
- Evid√™ncias dispon√≠veis: {{clinicalData.evidence}}

**Objetivo:** Protocolo evidence-based com classifica√ß√£o GRADE.`,
      defaultResponse: 'Protocolo de tratamento ser√° desenvolvido...',
      examples: []
    });

    // Prompt 6: An√°lise de Efetividade
    this.prompts.set('effectiveness_analysis', {
      id: 'effectiveness_analysis',
      name: 'An√°lise de Efetividade',
      version: '1.0.0',
      description: 'An√°lise estat√≠stica de efetividade de tratamentos',
      strategies: ['structured_output', 'context_optimization'],
      content: `Analise a efetividade do tratamento:

**Dados do Tratamento:**
- Protocolo utilizado: {{treatmentData.protocol}}
- Dura√ß√£o: {{treatmentData.duration}}
- Sess√µes realizadas: {{treatmentData.sessions}}
- Resultados obtidos: {{treatmentData.outcomes}}
- M√©tricas de progresso: {{treatmentData.metrics}}

**Objetivo:** An√°lise estat√≠stica com c√°lculo de NNT.`,
      defaultResponse: 'An√°lise de efetividade ser√° realizada...',
      examples: []
    });

    // Prompt 7: Educa√ß√£o de Estagi√°rios
    this.prompts.set('student_education', {
      id: 'student_education',
      name: 'Educa√ß√£o de Estagi√°rios',
      version: '1.0.0',
      description: 'Educa√ß√£o estruturada para estagi√°rios',
      strategies: ['chain_of_thought', 'role_playing', 'few_shot_learning'],
      content: `Eduque o estagi√°rio sobre o caso:

**Caso Cl√≠nico:**
- Paciente: {{patient.name}}
- Condi√ß√£o: {{clinicalData.condition}}
- N√≠vel do estagi√°rio: {{studentData.level}}
- Objetivos de aprendizagem: {{studentData.learningObjectives}}

**Objetivo:** Educa√ß√£o progressiva com questionamento socr√°tico.`,
      defaultResponse: 'Sess√£o educativa ser√° conduzida...',
      examples: []
    });

    // Prompt 8: Comunica√ß√£o com Pacientes
    this.prompts.set('patient_communication', {
      id: 'patient_communication',
      name: 'Comunica√ß√£o com Pacientes',
      version: '1.0.0',
      description: 'Comunica√ß√£o terap√™utica centrada no paciente',
      strategies: ['role_playing', 'context_optimization'],
      content: `Comunique-se com o paciente de forma terap√™utica:

**Perfil do Paciente:**
- Nome: {{patient.name}}
- Idade: {{patient.age}}
- Perfil de comunica√ß√£o: {{patient.communicationProfile}}
- Prefer√™ncias: {{patient.preferences}}
- Canal preferido: {{patient.preferredChannel}}

**Objetivo:** Comunica√ß√£o emp√°tica e eficaz.`,
      defaultResponse: 'Comunica√ß√£o ser√° adaptada ao perfil do paciente...',
      examples: []
    });
  }

  /**
   * Inicializar estrat√©gias avan√ßadas
   */
  private initializeStrategies(): void {
    // Chain-of-Thought Strategy
    this.strategies.set('chain_of_thought', {
      name: 'Chain-of-Thought',
      description: 'Racioc√≠nio cl√≠nico sistem√°tico em etapas',
      generateReasoningSteps: (request: PromptRequest) => [
        'Identificar sintomas e sinais apresentados',
        'Analisar hist√≥rico m√©dico e fatores de risco',
        'Considerar diagn√≥sticos diferenciais',
        'Avaliar evid√™ncias e contra-indica√ß√µes',
        'Formular conclus√£o baseada em evid√™ncias'
      ]
    });

    // Few-Shot Learning Strategy
    this.strategies.set('few_shot_learning', {
      name: 'Few-Shot Learning',
      description: 'Aprendizado com exemplos contextualizados',
      generateExamples: (request: PromptRequest) => [
        'Exemplo 1: Caso similar com resultado positivo',
        'Exemplo 2: Caso similar com complica√ß√µes',
        'Exemplo 3: Caso similar com tratamento alternativo'
      ]
    });

    // Role-Playing Strategy
    this.strategies.set('role_playing', {
      name: 'Role-Playing',
      description: 'Personas espec√≠ficas com expertise definida',
      generatePersona: (request: PromptRequest) => ({
        name: 'Dr. Experto em Fisioterapia',
        description: 'Especialista com 20 anos de experi√™ncia em fisioterapia ortop√©dica e neurol√≥gica'
      })
    });

    // Structured Output Strategy
    this.strategies.set('structured_output', {
      name: 'Structured Output',
      description: 'Formato JSON padronizado para documenta√ß√£o',
      generateOutputFormat: (request: PromptRequest) => `{
  "diagnosis": "string",
  "confidence": "number",
  "evidence": ["string"],
  "recommendations": ["string"],
  "followUp": "string"
}`
    });

    // Context Optimization Strategy
    this.strategies.set('context_optimization', {
      name: 'Context Optimization',
      description: 'Otimiza√ß√£o de contexto para melhor aproveitamento',
      optimizeContext: (request: PromptRequest) => {
        const context = [];
        
        if (request.patient) {
          context.push(`Paciente: ${request.patient.name}, ${request.patient.age} anos`);
        }
        
        if (request.appointment) {
          context.push(`Sess√£o: ${request.appointment.type} em ${request.appointment.startTime}`);
        }
        
        if (request.therapist) {
          context.push(`Terapeuta: ${request.therapist.name}`);
        }
        
        return context.join('\n');
      }
    });
  }
}

// Interfaces auxiliares
interface PromptTemplate {
  id: string;
  name: string;
  version: string;
  description: string;
  strategies: string[];
  content: string;
  defaultResponse: string;
  examples: string[];
}

interface PromptStrategy {
  name: string;
  description: string;
  generateReasoningSteps?: (request: PromptRequest) => string[];
  generateExamples?: (request: PromptRequest) => string[];
  generatePersona?: (request: PromptRequest) => { name: string; description: string };
  generateOutputFormat?: (request: PromptRequest) => string;
  optimizeContext?: (request: PromptRequest) => string;
}
