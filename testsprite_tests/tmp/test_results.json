[
  {
    "projectId": "741337d8-6688-45d6-aba9-3e530574dbc2",
    "testId": "1f70d847-453c-4937-b86d-e766b7364dc9",
    "userId": "e4283488-7051-707c-11ef-c2c52f8a0848",
    "title": "TC001-get all patients endpoint should return list of patients",
    "description": "Verify that the GET /api/patients endpoint returns a list of patients with correct data structure and status code 200.",
    "code": "import requests\nfrom requests.auth import HTTPBasicAuth\n\nBASE_URL = \"http://localhost:5174\"\nAUTH_USERNAME = \"admin@dudufisio.com\"\nAUTH_PASSWORD = \"demo123456\"\nTIMEOUT = 30\n\ndef test_get_all_patients_returns_list_with_correct_structure():\n    url = f\"{BASE_URL}/api/patients\"\n    try:\n        response = requests.get(url, auth=HTTPBasicAuth(AUTH_USERNAME, AUTH_PASSWORD), timeout=TIMEOUT)\n        response.raise_for_status()\n    except requests.exceptions.RequestException as e:\n        assert False, f\"HTTP request failed: {e}\"\n\n    assert response.status_code == 200, f\"Expected status code 200, got {response.status_code}\"\n\n    try:\n        patients = response.json()\n    except ValueError:\n        assert False, \"Response is not valid JSON\"\n\n    assert isinstance(patients, list), f\"Expected response to be a list, got {type(patients)}\"\n\n    # Validate structure of each patient object\n    for patient in patients:\n        assert isinstance(patient, dict), f\"Each patient should be a dict, got {type(patient)}\"\n        # Required patient keys based on schema\n        expected_keys = {\"id\", \"name\", \"email\", \"phone\", \"birthDate\", \"medicalHistory\"}\n        patient_keys = set(patient.keys())\n        missing_keys = expected_keys - patient_keys\n        assert not missing_keys, f\"Patient object missing keys: {missing_keys}\"\n\n        assert isinstance(patient[\"id\"], str), \"Patient 'id' should be string\"\n        assert isinstance(patient[\"name\"], str), \"Patient 'name' should be string\"\n        assert isinstance(patient[\"email\"], str), \"Patient 'email' should be string\"\n        assert isinstance(patient[\"phone\"], str), \"Patient 'phone' should be string\"\n        assert isinstance(patient[\"birthDate\"], str), \"Patient 'birthDate' should be string\"\n        # medicalHistory is an array of strings, can be empty\n        assert isinstance(patient[\"medicalHistory\"], list), \"Patient 'medicalHistory' should be a list\"\n        for entry in patient[\"medicalHistory\"]:\n            assert isinstance(entry, str), \"Each entry in 'medicalHistory' should be a string\"\n\ntest_get_all_patients_returns_list_with_correct_structure()",
    "testStatus": "FAILED",
    "testError": "Traceback (most recent call last):\n  File \"/var/task/requests/models.py\", line 974, in json\n    return complexjson.loads(self.text, **kwargs)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/var/lang/lib/python3.12/site-packages/simplejson/__init__.py\", line 514, in loads\n    return _default_decoder.decode(s)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/var/lang/lib/python3.12/site-packages/simplejson/decoder.py\", line 386, in decode\n    obj, end = self.raw_decode(s)\n               ^^^^^^^^^^^^^^^^^^\n  File \"/var/lang/lib/python3.12/site-packages/simplejson/decoder.py\", line 416, in raw_decode\n    return self.scan_once(s, idx=_w(s, idx).end())\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nsimplejson.errors.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"<string>\", line 20, in test_get_all_patients_returns_list_with_correct_structure\n  File \"/var/task/requests/models.py\", line 978, in json\n    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\nrequests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/var/task/handler.py\", line 258, in run_with_retry\n    exec(code, exec_env)\n  File \"<string>\", line 45, in <module>\n  File \"<string>\", line 22, in test_get_all_patients_returns_list_with_correct_structure\nAssertionError: Response is not valid JSON\n",
    "testType": "BACKEND",
    "createFrom": "mcp",
    "created": "2025-09-26T03:57:51.149Z",
    "modified": "2025-09-26T03:58:28.269Z"
  },
  {
    "projectId": "741337d8-6688-45d6-aba9-3e530574dbc2",
    "testId": "c46ca9ab-bb5d-418e-a113-f4ff8bdc473d",
    "userId": "e4283488-7051-707c-11ef-c2c52f8a0848",
    "title": "TC002-create new patient endpoint should create patient successfully",
    "description": "Verify that the POST /api/patients endpoint creates a new patient when provided valid data and returns status code 201.",
    "code": "import requests\nfrom requests.auth import HTTPBasicAuth\n\nBASE_URL = \"http://localhost:5174\"\nAUTH_USERNAME = \"admin@dudufisio.com\"\nAUTH_PASSWORD = \"demo123456\"\nHEADERS = {\n    \"Content-Type\": \"application/json\"\n}\nTIMEOUT = 30\n\ndef test_create_new_patient_should_create_successfully():\n    patient_data = {\n        \"name\": \"Test Patient\",\n        \"email\": \"test.patient@example.com\",\n        \"phone\": \"+5511999999999\",\n        \"birthDate\": \"1990-01-01\",\n        \"medicalHistory\": [\n            \"No known allergies\",\n            \"Previous knee surgery in 2018\"\n        ]\n    }\n\n    created_patient_id = None\n    try:\n        # Create new patient\n        response = requests.post(\n            f\"{BASE_URL}/api/patients\",\n            json=patient_data,\n            headers=HEADERS,\n            auth=HTTPBasicAuth(AUTH_USERNAME, AUTH_PASSWORD),\n            timeout=TIMEOUT\n        )\n\n        # Assert status code 201 Created\n        assert response.status_code == 201, f\"Expected status code 201, got {response.status_code}\"\n\n        # Location header or ID in response might be used to get created patient id\n        # If no response body or location, fallback to GET all and find patient by unique email\n        if response.headers.get(\"Location\"):\n            created_patient_id = response.headers.get(\"Location\").rstrip(\"/\").split(\"/\")[-1]\n        else:\n            # Try to get list of patients and find created one by email\n            list_response = requests.get(\n                f\"{BASE_URL}/api/patients\",\n                headers=HEADERS,\n                auth=HTTPBasicAuth(AUTH_USERNAME, AUTH_PASSWORD),\n                timeout=TIMEOUT\n            )\n            assert list_response.status_code == 200, f\"Expected status code 200 listing patients, got {list_response.status_code}\"\n            patients = list_response.json()\n            found_patients = [p for p in patients if p.get(\"email\") == patient_data[\"email\"]]\n            assert len(found_patients) == 1, f\"Created patient not found or multiple patients with same email\"\n            created_patient_id = found_patients[0][\"id\"]\n\n        # Verify the created patient details by GET\n        get_response = requests.get(\n            f\"{BASE_URL}/api/patients/{created_patient_id}\",\n            headers=HEADERS,\n            auth=HTTPBasicAuth(AUTH_USERNAME, AUTH_PASSWORD),\n            timeout=TIMEOUT\n        )\n        assert get_response.status_code == 200, f\"Expected status code 200 on GET patient, got {get_response.status_code}\"\n        patient = get_response.json()\n        assert patient[\"name\"] == patient_data[\"name\"], \"Patient name mismatch\"\n        assert patient[\"email\"] == patient_data[\"email\"], \"Patient email mismatch\"\n        assert patient[\"phone\"] == patient_data[\"phone\"], \"Patient phone mismatch\"\n        assert patient[\"birthDate\"] == patient_data[\"birthDate\"], \"Patient birthDate mismatch\"\n        assert patient[\"medicalHistory\"] == patient_data[\"medicalHistory\"], \"Patient medicalHistory mismatch\"\n\n    finally:\n        # Cleanup: delete the created patient if ID is known\n        if created_patient_id:\n            try:\n                delete_response = requests.delete(\n                    f\"{BASE_URL}/api/patients/{created_patient_id}\",\n                    headers=HEADERS,\n                    auth=HTTPBasicAuth(AUTH_USERNAME, AUTH_PASSWORD),\n                    timeout=TIMEOUT\n                )\n                # Not asserting delete status, just attempt cleanup\n            except Exception:\n                pass\n\ntest_create_new_patient_should_create_successfully()",
    "testStatus": "FAILED",
    "testError": "Traceback (most recent call last):\n  File \"/var/task/handler.py\", line 258, in run_with_retry\n    exec(code, exec_env)\n  File \"<string>\", line 85, in <module>\n  File \"<string>\", line 36, in test_create_new_patient_should_create_successfully\nAssertionError: Expected status code 201, got 404\n",
    "testType": "BACKEND",
    "createFrom": "mcp",
    "created": "2025-09-26T03:57:51.155Z",
    "modified": "2025-09-26T03:58:30.308Z"
  },
  {
    "projectId": "741337d8-6688-45d6-aba9-3e530574dbc2",
    "testId": "b21f3a75-52bf-47a1-b8f3-486ef7d9c442",
    "userId": "e4283488-7051-707c-11ef-c2c52f8a0848",
    "title": "TC003-get patient by id endpoint should return patient details",
    "description": "Verify that the GET /api/patients/{id} endpoint returns the correct patient details for a valid patient ID with status code 200.",
    "code": "import requests\nfrom requests.auth import HTTPBasicAuth\n\nBASE_URL = \"http://localhost:5174\"\nAUTH = HTTPBasicAuth(\"admin@dudufisio.com\", \"demo123456\")\nHEADERS = {\"Content-Type\": \"application/json\"}\nTIMEOUT = 30\n\n\ndef test_get_patient_by_id_returns_patient_details():\n    # First, create a patient to get a valid patient ID\n    patient_data = {\n        \"name\": \"Test Patient\",\n        \"email\": \"test.patient@example.com\",\n        \"phone\": \"123456789\",\n        \"birthDate\": \"1990-01-01\",\n        \"medicalHistory\": [\"None\"]\n    }\n\n    patient_id = None\n\n    try:\n        create_response = requests.post(\n            f\"{BASE_URL}/api/patients\",\n            json=patient_data,\n            headers=HEADERS,\n            auth=AUTH,\n            timeout=TIMEOUT\n        )\n        assert create_response.status_code == 201, f\"Expected status code 201 on patient creation, got {create_response.status_code}\"\n\n        # Get the list of patients to retrieve the created patient's ID (safer than relying on location header)\n        list_response = requests.get(\n            f\"{BASE_URL}/api/patients\",\n            headers=HEADERS,\n            auth=AUTH,\n            timeout=TIMEOUT\n        )\n        assert list_response.status_code == 200, f\"Expected status code 200 getting patients list, got {list_response.status_code}\"\n        patients = list_response.json()\n        # find patient by unique email\n        matching_patients = [p for p in patients if p.get(\"email\") == patient_data[\"email\"]]\n        assert len(matching_patients) == 1, f\"Expected exactly one patient with email {patient_data['email']}, found {len(matching_patients)}\"\n        patient_id = matching_patients[0].get(\"id\")\n        assert patient_id, \"Patient ID not found in patient list response\"\n\n        # Use patient_id to get the patient details\n        get_response = requests.get(\n            f\"{BASE_URL}/api/patients/{patient_id}\",\n            headers=HEADERS,\n            auth=AUTH,\n            timeout=TIMEOUT\n        )\n        assert get_response.status_code == 200, f\"Expected status code 200 on get patient by id, got {get_response.status_code}\"\n        patient = get_response.json()\n\n        # Validate returned patient details match initial data\n        assert patient.get(\"id\") == patient_id, \"Returned patient id does not match requested id\"\n        assert patient.get(\"name\") == patient_data[\"name\"], \"Patient name mismatch\"\n        assert patient.get(\"email\") == patient_data[\"email\"], \"Patient email mismatch\"\n        assert patient.get(\"phone\") == patient_data[\"phone\"], \"Patient phone mismatch\"\n        assert patient.get(\"birthDate\") == patient_data[\"birthDate\"], \"Patient birthDate mismatch\"\n        assert isinstance(patient.get(\"medicalHistory\"), list), \"medicalHistory should be a list\"\n        assert patient.get(\"medicalHistory\") == patient_data[\"medicalHistory\"], \"Patient medicalHistory mismatch\"\n\n    finally:\n        # Cleanup - delete the created patient\n        if patient_id:\n            requests.delete(\n                f\"{BASE_URL}/api/patients/{patient_id}\",\n                headers=HEADERS,\n                auth=AUTH,\n                timeout=TIMEOUT\n            )\n\n\ntest_get_patient_by_id_returns_patient_details()",
    "testStatus": "FAILED",
    "testError": "Traceback (most recent call last):\n  File \"/var/task/handler.py\", line 258, in run_with_retry\n    exec(code, exec_env)\n  File \"<string>\", line 77, in <module>\n  File \"<string>\", line 30, in test_get_patient_by_id_returns_patient_details\nAssertionError: Expected status code 201 on patient creation, got 404\n",
    "testType": "BACKEND",
    "createFrom": "mcp",
    "created": "2025-09-26T03:57:51.161Z",
    "modified": "2025-09-26T03:58:30.310Z"
  },
  {
    "projectId": "741337d8-6688-45d6-aba9-3e530574dbc2",
    "testId": "56091a1a-29bb-478b-8c7d-90b89b710f47",
    "userId": "e4283488-7051-707c-11ef-c2c52f8a0848",
    "title": "TC004-get appointments endpoint should return filtered appointments",
    "description": "Verify that the GET /api/appointments endpoint returns a list of appointments filtered by startDate and endDate query parameters with status code 200.",
    "code": "import requests\nfrom requests.auth import HTTPBasicAuth\n\nBASE_URL = \"http://localhost:5174\"\nTIMEOUT = 30\nAUTH = HTTPBasicAuth(\"admin@dudufisio.com\", \"demo123456\")\nHEADERS = {\n    \"Accept\": \"application/json\"\n}\n\ndef test_get_appointments_filtered_by_date():\n    params = {\n        \"startDate\": \"2025-01-01\",\n        \"endDate\": \"2025-12-31\"\n    }\n    try:\n        response = requests.get(f\"{BASE_URL}/api/appointments\", auth=AUTH, headers=HEADERS, params=params, timeout=TIMEOUT)\n        assert response.status_code == 200, f\"Expected status code 200, got {response.status_code}\"\n        appointments = response.json()\n        assert isinstance(appointments, list), \"Response is not a list\"\n        # Optional: Validate each appointment has expected keys (basic schema validation)\n        if appointments:\n            appointment = appointments[0]\n            assert isinstance(appointment, dict), \"Each appointment should be an object\"\n            # Common fields to expect by schema reference (not fully detailed in PRD)\n            # We check at least presence of date or datetime for filtering sanity\n            possible_date_fields = [\"date\", \"startDate\", \"appointmentDate\"]\n            date_field_found = any(field in appointment for field in possible_date_fields)\n            assert date_field_found, \"No date field found in appointment to validate filtering\"\n    except requests.RequestException as e:\n        assert False, f\"Request failed: {e}\"\n\ntest_get_appointments_filtered_by_date()",
    "testStatus": "FAILED",
    "testError": "Traceback (most recent call last):\n  File \"/var/task/handler.py\", line 258, in run_with_retry\n    exec(code, exec_env)\n  File \"<string>\", line 33, in <module>\n  File \"<string>\", line 18, in test_get_appointments_filtered_by_date\nAssertionError: Expected status code 200, got 404\n",
    "testType": "BACKEND",
    "createFrom": "mcp",
    "created": "2025-09-26T03:57:51.167Z",
    "modified": "2025-09-26T03:58:27.238Z"
  },
  {
    "projectId": "741337d8-6688-45d6-aba9-3e530574dbc2",
    "testId": "4bea2450-a275-4473-b047-43d6a17fc676",
    "userId": "e4283488-7051-707c-11ef-c2c52f8a0848",
    "title": "TC005-create new appointment endpoint should create appointment successfully",
    "description": "Verify that the POST /api/appointments endpoint creates a new appointment with valid data and returns status code 201.",
    "code": "import requests\nfrom requests.auth import HTTPBasicAuth\n\nBASE_URL = \"http://localhost:5174\"\nAUTH = HTTPBasicAuth('admin@dudufisio.com', 'demo123456')\nTIMEOUT = 30\n\ndef test_create_new_appointment():\n    # Sample payload for creating an appointment\n    # Appointment schema details are limited; assuming minimal required fields\n    # We'll create a patient first to have a valid patientId for the appointment\n\n    # Step 1: Create a patient to link appointment\n    patient_payload = {\n        \"name\": \"Test Patient for Appointment\",\n        \"email\": \"test.patient.appointment@example.com\",\n        \"phone\": \"+5511999999999\",\n        \"birthDate\": \"1990-01-01\",\n        \"medicalHistory\": []\n    }\n    patient_id = None\n    appointment_id = None\n    headers = {\n        \"Content-Type\": \"application/json\"\n    }\n\n    try:\n        patient_response = requests.post(\n            f\"{BASE_URL}/api/patients\",\n            json=patient_payload,\n            auth=AUTH,\n            headers=headers,\n            timeout=TIMEOUT\n        )\n        assert patient_response.status_code == 201, f\"Failed to create patient, status code: {patient_response.status_code}\"\n        # Try to get patient ID from location header or response body\n        if 'location' in patient_response.headers:\n            location = patient_response.headers['location']\n            patient_id = location.split('/')[-1]\n        else:\n            # If no location header, try to get returned patient JSON with id\n            try:\n                patient_json = patient_response.json()\n                patient_id = patient_json.get('id')\n            except Exception:\n                patient_id = None\n\n        assert patient_id is not None, \"Patient ID not found after creation.\"\n\n        # Step 2: Create appointment linked to the created patient\n        # Assuming the appointment schema minimally includes patientId, date, time, and therapistId (if required)\n        # As full schema is not available, we'll use typical fields\n        # Use a datetime in the future for the appointment\n\n        import datetime\n        from datetime import timedelta\n\n        start_datetime = (datetime.datetime.now() + timedelta(days=1)).replace(hour=10, minute=0, second=0, microsecond=0)\n        end_datetime = start_datetime + timedelta(minutes=30)\n\n        appointment_payload = {\n            \"patientId\": patient_id,\n            \"startTime\": start_datetime.isoformat(),\n            \"endTime\": end_datetime.isoformat(),\n            \"notes\": \"Test appointment creation\",\n            # adding dummy therapistId if needed - since schema unclear we leave it out or add a placeholder\n            # \"therapistId\": \"therapist-1234\"\n        }\n\n        appointment_response = requests.post(\n            f\"{BASE_URL}/api/appointments\",\n            json=appointment_payload,\n            auth=AUTH,\n            headers=headers,\n            timeout=TIMEOUT\n        )\n        assert appointment_response.status_code == 201, f\"Appointment creation failed with status {appointment_response.status_code}\"\n\n        # Possibly get appointment ID from location header or response body for cleanup\n        if 'location' in appointment_response.headers:\n            location = appointment_response.headers['location']\n            appointment_id = location.split('/')[-1]\n        else:\n            try:\n                appointment_json = appointment_response.json()\n                appointment_id = appointment_json.get('id')\n            except Exception:\n                appointment_id = None\n\n    finally:\n        # Cleanup created appointment if possible\n        if appointment_id:\n            try:\n                requests.delete(\n                    f\"{BASE_URL}/api/appointments/{appointment_id}\",\n                    auth=AUTH,\n                    timeout=TIMEOUT\n                )\n            except Exception:\n                pass\n        # Cleanup created patient\n        if patient_id:\n            try:\n                requests.delete(\n                    f\"{BASE_URL}/api/patients/{patient_id}\",\n                    auth=AUTH,\n                    timeout=TIMEOUT\n                )\n            except Exception:\n                pass\n\ntest_create_new_appointment()",
    "testStatus": "FAILED",
    "testError": "Traceback (most recent call last):\n  File \"/var/task/handler.py\", line 258, in run_with_retry\n    exec(code, exec_env)\n  File \"<string>\", line 112, in <module>\n  File \"<string>\", line 35, in test_create_new_appointment\nAssertionError: Failed to create patient, status code: 404\n",
    "testType": "BACKEND",
    "createFrom": "mcp",
    "created": "2025-09-26T03:57:51.173Z",
    "modified": "2025-09-26T03:58:28.277Z"
  },
  {
    "projectId": "741337d8-6688-45d6-aba9-3e530574dbc2",
    "testId": "08f05501-d50c-49f7-afac-28a3b91d1bdb",
    "userId": "e4283488-7051-707c-11ef-c2c52f8a0848",
    "title": "TC006-get medical records endpoint should return list of records",
    "description": "Verify that the GET /api/medical-records endpoint returns a list of clinical documents with status code 200.",
    "code": "import requests\nfrom requests.auth import HTTPBasicAuth\n\nBASE_URL = \"http://localhost:5174\"\nTIMEOUT = 30\nAUTH_USERNAME = \"admin@dudufisio.com\"\nAUTH_PASSWORD = \"demo123456\"\n\ndef test_get_medical_records_returns_list():\n    url = f\"{BASE_URL}/api/medical-records\"\n    headers = {\n        \"Accept\": \"application/json\"\n    }\n    try:\n        response = requests.get(url, headers=headers, auth=HTTPBasicAuth(AUTH_USERNAME, AUTH_PASSWORD), timeout=TIMEOUT)\n        # Verify status code 200\n        assert response.status_code == 200, f\"Expected status code 200 but got {response.status_code}\"\n        # Verify response content type JSON\n        content_type = response.headers.get(\"Content-Type\", \"\")\n        assert \"application/json\" in content_type, f\"Expected 'application/json' in Content-Type but got '{content_type}'\"\n        # Verify response is a JSON array (list)\n        data = response.json()\n        assert isinstance(data, list), f\"Expected response JSON to be a list but got {type(data).__name__}\"\n        # Optionally, verify each item contains expected ClinicalDocument fields if available\n        # Minimal validation: ClinicalDocument is likely an object, confirm items are dicts\n        for item in data:\n            assert isinstance(item, dict), \"Expected each clinical document to be a JSON object\"\n    except requests.RequestException as e:\n        assert False, f\"Request failed with exception: {e}\"\n\ntest_get_medical_records_returns_list()\n",
    "testStatus": "FAILED",
    "testError": "Traceback (most recent call last):\n  File \"/var/task/handler.py\", line 258, in run_with_retry\n    exec(code, exec_env)\n  File \"<string>\", line 31, in <module>\n  File \"<string>\", line 17, in test_get_medical_records_returns_list\nAssertionError: Expected status code 200 but got 404\n",
    "testType": "BACKEND",
    "createFrom": "mcp",
    "created": "2025-09-26T03:57:51.181Z",
    "modified": "2025-09-26T03:58:36.331Z"
  },
  {
    "projectId": "741337d8-6688-45d6-aba9-3e530574dbc2",
    "testId": "ddce6c3b-f540-4593-823e-fa726e7218cc",
    "userId": "e4283488-7051-707c-11ef-c2c52f8a0848",
    "title": "TC007-generate clinical report endpoint should return generated report",
    "description": "Verify that the POST /api/ai/generate-report endpoint generates a clinical report based on provided patientId, reportType, and data, returning status code 200 and the report content.",
    "code": "import requests\nfrom requests.auth import HTTPBasicAuth\n\nBASE_URL = \"http://localhost:5174\"\nAUTH_USERNAME = \"admin@dudufisio.com\"\nAUTH_PASSWORD = \"demo123456\"\nTIMEOUT = 30\n\n\ndef test_generate_clinical_report_should_return_generated_report():\n    # Step 1: Create a patient to use a valid patientId\n    patient_payload = {\n        \"name\": \"Test Patient AI Report\",\n        \"email\": \"test_ai_report@dudufisio.com\",\n        \"phone\": \"+5511999999999\",\n        \"birthDate\": \"1985-05-20\",\n        \"medicalHistory\": [\"hypertension\", \"allergy to penicillin\"]\n    }\n\n    patient_id = None\n\n    try:\n        # Create patient\n        create_patient_resp = requests.post(\n            f\"{BASE_URL}/api/patients\",\n            json=patient_payload,\n            auth=HTTPBasicAuth(AUTH_USERNAME, AUTH_PASSWORD),\n            timeout=TIMEOUT\n        )\n        assert create_patient_resp.status_code == 201, f\"Failed to create patient: {create_patient_resp.text}\"\n        # The patient id should be returned in Location header or response body; assuming response body returns it\n        if create_patient_resp.headers.get(\"Content-Type\", \"\").startswith(\"application/json\"):\n            patient_data = create_patient_resp.json()\n            patient_id = patient_data.get(\"id\")\n        if not patient_id:\n            # fallback: try to get patients and find our patient by email\n            list_patients_resp = requests.get(\n                f\"{BASE_URL}/api/patients\",\n                auth=HTTPBasicAuth(AUTH_USERNAME, AUTH_PASSWORD),\n                timeout=TIMEOUT\n            )\n            assert list_patients_resp.status_code == 200, \"Could not list patients to get ID\"\n            patients = list_patients_resp.json()\n            for p in patients:\n                if p.get(\"email\") == patient_payload[\"email\"]:\n                    patient_id = p.get(\"id\")\n                    break\n        assert patient_id is not None, \"Patient ID not found after creation\"\n\n        # Step 2: Generate clinical report with given patientId\n        report_payload = {\n            \"patientId\": patient_id,\n            \"reportType\": \"clinical_summary\",\n            \"data\": {\n                \"notes\": \"Patient shows significant improvement in range of motion.\",\n                \"observations\": [\"Normal gait\", \"Mild pain on movement\"]\n            }\n        }\n\n        generate_report_resp = requests.post(\n            f\"{BASE_URL}/api/ai/generate-report\",\n            json=report_payload,\n            auth=HTTPBasicAuth(AUTH_USERNAME, AUTH_PASSWORD),\n            timeout=TIMEOUT\n        )\n        assert generate_report_resp.status_code == 200, f\"Unexpected status code: {generate_report_resp.status_code}\"\n        response_json = generate_report_resp.json()\n        assert isinstance(response_json, dict), \"Response is not a JSON object\"\n        assert \"report\" in response_json, \"'report' key not in response\"\n        assert isinstance(response_json[\"report\"], str), \"'report' is not a string\"\n        assert len(response_json[\"report\"].strip()) > 0, \"Report content is empty\"\n\n    finally:\n        # Cleanup: Delete the patient created for this test if patient_id exists\n        if patient_id:\n            # Assuming DELETE /api/patients/{id} is supported (not in PRD, but typical)\n            # If not, skip cleanup to avoid side effects\n            try:\n                del_resp = requests.delete(\n                    f\"{BASE_URL}/api/patients/{patient_id}\",\n                    auth=HTTPBasicAuth(AUTH_USERNAME, AUTH_PASSWORD),\n                    timeout=TIMEOUT\n                )\n                # No assertion here, just best effort cleanup\n            except Exception:\n                pass\n\n\ntest_generate_clinical_report_should_return_generated_report()",
    "testStatus": "FAILED",
    "testError": "Traceback (most recent call last):\n  File \"/var/task/handler.py\", line 258, in run_with_retry\n    exec(code, exec_env)\n  File \"<string>\", line 89, in <module>\n  File \"<string>\", line 30, in test_generate_clinical_report_should_return_generated_report\nAssertionError: Failed to create patient: \n",
    "testType": "BACKEND",
    "createFrom": "mcp",
    "created": "2025-09-26T03:57:51.187Z",
    "modified": "2025-09-26T03:58:33.698Z"
  },
  {
    "projectId": "741337d8-6688-45d6-aba9-3e530574dbc2",
    "testId": "efde0e7a-cbc8-40da-9552-ea74ed72f9cf",
    "userId": "e4283488-7051-707c-11ef-c2c52f8a0848",
    "title": "TC008-add pain point endpoint should add pain point successfully",
    "description": "Verify that the POST /api/body-map/pain-points endpoint adds a pain point to the body map for a patient and returns status code 201.",
    "code": "import requests\nfrom requests.auth import HTTPBasicAuth\n\nBASE_URL = \"http://localhost:5174\"\nTIMEOUT = 30\nAUTH = HTTPBasicAuth(\"admin@dudufisio.com\", \"demo123456\")\n\ndef test_add_pain_point_should_add_pain_point_successfully():\n    # First, create a new patient to use for the pain point\n    patient_data = {\n        \"name\": \"Test Patient for Pain Point\",\n        \"email\": \"testpainpoint@example.com\",\n        \"phone\": \"9999999999\",\n        \"birthDate\": \"1990-01-01\",\n        \"medicalHistory\": []\n    }\n    patient_id = None\n\n    try:\n        # Create patient\n        patient_resp = requests.post(\n            f\"{BASE_URL}/api/patients\",\n            json=patient_data,\n            auth=AUTH,\n            timeout=TIMEOUT\n        )\n        assert patient_resp.status_code == 201, f\"Failed to create patient, status: {patient_resp.status_code}, response: {patient_resp.text}\"\n        # Assuming response body contains patient with 'id' field\n        patient = patient_resp.json()\n        patient_id = patient.get(\"id\")\n        assert patient_id is not None, \"Patient ID not returned in response\"\n\n        # Add pain point for the patient\n        pain_point_data = {\n            \"patientId\": patient_id,\n            \"x\": 0.5,\n            \"y\": 0.5,\n            \"intensity\": 7,\n            \"description\": \"Severe pain in lower back\"\n        }\n\n        pain_point_resp = requests.post(\n            f\"{BASE_URL}/api/body-map/pain-points\",\n            json=pain_point_data,\n            auth=AUTH,\n            timeout=TIMEOUT\n        )\n        assert pain_point_resp.status_code == 201, f\"Failed to add pain point, status: {pain_point_resp.status_code}, response: {pain_point_resp.text}\"\n\n    finally:\n        # Clean up - delete the patient if created\n        if patient_id:\n            requests.delete(\n                f\"{BASE_URL}/api/patients/{patient_id}\",\n                auth=AUTH,\n                timeout=TIMEOUT\n            )\n\ntest_add_pain_point_should_add_pain_point_successfully()",
    "testStatus": "FAILED",
    "testError": "Traceback (most recent call last):\n  File \"/var/task/handler.py\", line 258, in run_with_retry\n    exec(code, exec_env)\n  File \"<string>\", line 59, in <module>\n  File \"<string>\", line 27, in test_add_pain_point_should_add_pain_point_successfully\nAssertionError: Failed to create patient, status: 404, response: \n",
    "testType": "BACKEND",
    "createFrom": "mcp",
    "created": "2025-09-26T03:57:51.193Z",
    "modified": "2025-09-26T03:58:33.695Z"
  },
  {
    "projectId": "741337d8-6688-45d6-aba9-3e530574dbc2",
    "testId": "430c0b7e-64e1-48d4-9ee7-5e59ec818149",
    "userId": "e4283488-7051-707c-11ef-c2c52f8a0848",
    "title": "TC009-get exercises endpoint should return filtered exercises",
    "description": "Verify that the GET /api/exercises endpoint returns a list of exercises filtered by category and specialty query parameters with status code 200.",
    "code": "import requests\nfrom requests.auth import HTTPBasicAuth\n\ndef test_get_exercises_filtered():\n    base_url = \"http://localhost:5174\"\n    endpoint = \"/api/exercises\"\n    url = base_url + endpoint\n\n    auth = HTTPBasicAuth(\"admin@dudufisio.com\", \"demo123456\")\n    headers = {\n        \"Accept\": \"application/json\"\n    }\n\n    # Example filters for category and specialty - these can be adjusted as needed\n    params = {\n        \"category\": \"strength\",\n        \"specialty\": \"orthopedic\"\n    }\n\n    try:\n        response = requests.get(url, headers=headers, params=params, auth=auth, timeout=30)\n    except requests.RequestException as e:\n        assert False, f\"Request failed: {e}\"\n\n    assert response.status_code == 200, f\"Expected status code 200 but got {response.status_code}\"\n    try:\n        exercises = response.json()\n    except ValueError:\n        assert False, \"Response is not valid JSON\"\n\n    assert isinstance(exercises, list), \"Response JSON is not a list\"\n\n    # If the list is not empty, verify each exercise contains expected keys\n    # According to PRD, each exercise should comply with Exercise schema, assumed to have properties category and specialty\n    for exercise in exercises:\n        assert isinstance(exercise, dict), \"Exercise item is not a JSON object\"\n        # Verify category filter is respected if category is present in exercise\n        if \"category\" in exercise:\n            assert exercise[\"category\"] == params[\"category\"], f\"Exercise category {exercise.get('category')} does not match filter {params['category']}\"\n        # Verify specialty filter is respected if specialty is present\n        if \"specialty\" in exercise:\n            assert exercise[\"specialty\"] == params[\"specialty\"], f\"Exercise specialty {exercise.get('specialty')} does not match filter {params['specialty']}\"\n\ntest_get_exercises_filtered()",
    "testStatus": "FAILED",
    "testError": "Traceback (most recent call last):\n  File \"/var/task/handler.py\", line 258, in run_with_retry\n    exec(code, exec_env)\n  File \"<string>\", line 44, in <module>\n  File \"<string>\", line 25, in test_get_exercises_filtered\nAssertionError: Expected status code 200 but got 404\n",
    "testType": "BACKEND",
    "createFrom": "mcp",
    "created": "2025-09-26T03:57:51.199Z",
    "modified": "2025-09-26T03:58:32.290Z"
  },
  {
    "projectId": "741337d8-6688-45d6-aba9-3e530574dbc2",
    "testId": "afd58b66-da7b-4c9f-a708-db1010796e2c",
    "userId": "e4283488-7051-707c-11ef-c2c52f8a0848",
    "title": "TC010-user login endpoint should authenticate user successfully",
    "description": "Verify that the POST /api/auth/login endpoint authenticates a user with valid email and password, returning status code 200 along with user details and token.",
    "code": "import requests\n\nbase_url = \"http://localhost:5174\"\ntimeout = 30\n\ndef test_user_login_endpoint_should_authenticate_user_successfully():\n    url = f\"{base_url}/api/auth/login\"\n    headers = {\n        \"Content-Type\": \"application/json\"\n    }\n    # Use credentials from instructions (admin@dudufisio.com / demo123456)\n    payload = {\n        \"email\": \"admin@dudufisio.com\",\n        \"password\": \"demo123456\"\n    }\n\n    try:\n        response = requests.post(url, json=payload, headers=headers, timeout=timeout)\n    except requests.RequestException as e:\n        assert False, f\"Request failed: {e}\"\n\n    # Validate status code\n    assert response.status_code == 200, f\"Expected status code 200, got {response.status_code}\"\n\n    # Validate response content\n    try:\n        data = response.json()\n    except ValueError:\n        assert False, \"Response is not valid JSON\"\n\n    # Check 'user' and 'token' keys exist in response data\n    assert \"user\" in data, \"'user' key missing in response\"\n    assert isinstance(data[\"user\"], dict), \"'user' should be an object\"\n\n    assert \"token\" in data, \"'token' key missing in response\"\n    assert isinstance(data[\"token\"], str), \"'token' should be a string\"\n\n    # Further validate user details contain at least 'email' matching input\n    user = data[\"user\"]\n    assert \"email\" in user, \"'email' missing in user details\"\n    assert user[\"email\"].lower() == payload[\"email\"].lower(), \"Returned user email does not match login email\"\n\ntest_user_login_endpoint_should_authenticate_user_successfully()",
    "testStatus": "FAILED",
    "testError": "Traceback (most recent call last):\n  File \"/var/task/handler.py\", line 258, in run_with_retry\n    exec(code, exec_env)\n  File \"<string>\", line 43, in <module>\n  File \"<string>\", line 23, in test_user_login_endpoint_should_authenticate_user_successfully\nAssertionError: Expected status code 200, got 404\n",
    "testType": "BACKEND",
    "createFrom": "mcp",
    "created": "2025-09-26T03:57:51.205Z",
    "modified": "2025-09-26T03:58:33.714Z"
  }
]
