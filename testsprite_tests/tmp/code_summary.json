{
  "tech_stack": [
    "TypeScript",
    "React",
    "Vite",
    "Supabase",
    "PostgreSQL",
    "Tailwind CSS",
    "shadcn/ui",
    "React Router",
    "Zod",
    "React Hook Form",
    "Framer Motion",
    "Playwright",
    "Jest"
  ],
  "features": [
    {
      "name": "Patient Management API",
      "description": "Complete patient management system with CRUD operations, medical history tracking, and patient portal access",
      "files": [
        "services/patientService.ts",
        "services/supabase/patientService.ts",
        "pages/PatientListPage.tsx",
        "pages/PatientDetailPage.tsx",
        "pages/patient-portal/PatientDashboardPage.tsx",
        "components/patient/PatientForm.tsx",
        "components/patient/PatientCard.tsx"
      ],
      "api_doc": {
        "openapi": "3.0.0",
        "info": {
          "title": "Patient Management API",
          "version": "1.0.0",
          "description": "API for managing patients in the DuduFisio-AI system"
        },
        "paths": {
          "/api/patients": {
            "get": {
              "summary": "Get all patients",
              "responses": {
                "200": {
                  "description": "List of patients",
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "array",
                        "items": {
                          "$ref": "#/components/schemas/Patient"
                        }
                      }
                    }
                  }
                }
              }
            },
            "post": {
              "summary": "Create new patient",
              "requestBody": {
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/Patient"
                    }
                  }
                }
              },
              "responses": {
                "201": {
                  "description": "Patient created successfully"
                }
              }
            }
          },
          "/api/patients/{id}": {
            "get": {
              "summary": "Get patient by ID",
              "parameters": [
                {
                  "name": "id",
                  "in": "path",
                  "required": true,
                  "schema": {
                    "type": "string"
                  }
                }
              ],
              "responses": {
                "200": {
                  "description": "Patient details",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/Patient"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "components": {
          "schemas": {
            "Patient": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string"
                },
                "name": {
                  "type": "string"
                },
                "email": {
                  "type": "string"
                },
                "phone": {
                  "type": "string"
                },
                "birthDate": {
                  "type": "string",
                  "format": "date"
                },
                "medicalHistory": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      }
    },
    {
      "name": "Appointment Scheduling API",
      "description": "Advanced appointment scheduling system with multiple views, conflict detection, and series management",
      "files": [
        "services/appointmentService.ts",
        "services/supabase/appointmentService.ts",
        "pages/AgendaPage.tsx",
        "components/agenda/AgendaViewSelector.tsx",
        "components/agenda/ImprovedWeeklyView.tsx",
        "components/agenda/AppointmentStatusIndicator.tsx",
        "components/agenda/AppointmentTooltip.tsx"
      ],
      "api_doc": {
        "openapi": "3.0.0",
        "info": {
          "title": "Appointment Scheduling API",
          "version": "1.0.0",
          "description": "API for managing appointments and scheduling"
        },
        "paths": {
          "/api/appointments": {
            "get": {
              "summary": "Get appointments with filters",
              "parameters": [
                {
                  "name": "startDate",
                  "in": "query",
                  "schema": {
                    "type": "string",
                    "format": "date"
                  }
                },
                {
                  "name": "endDate",
                  "in": "query",
                  "schema": {
                    "type": "string",
                    "format": "date"
                  }
                }
              ],
              "responses": {
                "200": {
                  "description": "List of appointments",
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "array",
                        "items": {
                          "$ref": "#/components/schemas/Appointment"
                        }
                      }
                    }
                  }
                }
              }
            },
            "post": {
              "summary": "Create new appointment",
              "requestBody": {
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/Appointment"
                    }
                  }
                }
              },
              "responses": {
                "201": {
                  "description": "Appointment created successfully"
                }
              }
            }
          }
        }
      }
    },
    {
      "name": "Medical Records System API",
      "description": "Complete electronic medical records system with FHIR compliance, digital signatures, and clinical templates",
      "files": [
        "lib/medical-records/clinical/ClinicalDocument.ts",
        "lib/medical-records/fhir/FHIRValidator.ts",
        "lib/medical-records/compliance/CFMValidator.ts",
        "components/medical-records/MedicalRecordsSystem.tsx",
        "components/medical-records/MedicalRecordsDashboard.tsx",
        "components/medical-records/AssessmentForm.tsx",
        "components/medical-records/EvolutionEditor.tsx"
      ],
      "api_doc": {
        "openapi": "3.0.0",
        "info": {
          "title": "Medical Records System API",
          "version": "1.0.0",
          "description": "FHIR-compliant medical records management system"
        },
        "paths": {
          "/api/medical-records": {
            "get": {
              "summary": "Get medical records",
              "responses": {
                "200": {
                  "description": "List of medical records",
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "array",
                        "items": {
                          "$ref": "#/components/schemas/ClinicalDocument"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    {
      "name": "AI Services API",
      "description": "Multiple AI service integrations including Google Gemini, Groq, and XAI for clinical assistance and report generation",
      "files": [
        "services/geminiService.ts",
        "services/groqService.ts",
        "services/xaiService.ts",
        "services/ai/aiAssistantService.ts",
        "components/ai/AIAssistant.tsx",
        "components/ai/ReportGenerator.tsx"
      ],
      "api_doc": {
        "openapi": "3.0.0",
        "info": {
          "title": "AI Services API",
          "version": "1.0.0",
          "description": "AI-powered clinical assistance and report generation"
        },
        "paths": {
          "/api/ai/generate-report": {
            "post": {
              "summary": "Generate clinical report using AI",
              "requestBody": {
                "content": {
                  "application/json": {
                    "schema": {
                      "type": "object",
                      "properties": {
                        "patientId": {
                          "type": "string"
                        },
                        "reportType": {
                          "type": "string"
                        },
                        "data": {
                          "type": "object"
                        }
                      }
                    }
                  }
                }
              },
              "responses": {
                "200": {
                  "description": "Generated report",
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "object",
                        "properties": {
                          "report": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    {
      "name": "Body Map System API",
      "description": "Interactive body mapping system for marking and visualizing pain points and treatment areas",
      "files": [
        "services/bodyMapService.ts",
        "components/body-map/BodyMap.tsx",
        "components/body-map/PainPointMarker.tsx",
        "components/body-map/BodyMapViewer.tsx"
      ],
      "api_doc": {
        "openapi": "3.0.0",
        "info": {
          "title": "Body Map System API",
          "version": "1.0.0",
          "description": "Interactive body mapping for pain point visualization"
        },
        "paths": {
          "/api/body-map/pain-points": {
            "post": {
              "summary": "Add pain point to body map",
              "requestBody": {
                "content": {
                  "application/json": {
                    "schema": {
                      "type": "object",
                      "properties": {
                        "patientId": {
                          "type": "string"
                        },
                        "x": {
                          "type": "number"
                        },
                        "y": {
                          "type": "number"
                        },
                        "intensity": {
                          "type": "number"
                        },
                        "description": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              },
              "responses": {
                "201": {
                  "description": "Pain point added successfully"
                }
              }
            }
          }
        }
      }
    },
    {
      "name": "Exercise Library API",
      "description": "Comprehensive exercise library with categorization, media support, and prescription capabilities",
      "files": [
        "pages/ExerciseLibraryPage.tsx",
        "components/exercise/ExerciseLibrary.tsx",
        "components/exercise/ExerciseCard.tsx",
        "components/exercise/ExercisePrescription.tsx",
        "data/mockExerciseLibrary.ts"
      ],
      "api_doc": {
        "openapi": "3.0.0",
        "info": {
          "title": "Exercise Library API",
          "version": "1.0.0",
          "description": "Exercise library management and prescription system"
        },
        "paths": {
          "/api/exercises": {
            "get": {
              "summary": "Get exercises with filters",
              "parameters": [
                {
                  "name": "category",
                  "in": "query",
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "name": "specialty",
                  "in": "query",
                  "schema": {
                    "type": "string"
                  }
                }
              ],
              "responses": {
                "200": {
                  "description": "List of exercises",
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "array",
                        "items": {
                          "$ref": "#/components/schemas/Exercise"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    {
      "name": "Authentication & Authorization API",
      "description": "Multi-role authentication system with Supabase integration, 2FA support, and role-based access control",
      "files": [
        "services/auth/supabaseAuthService.ts",
        "contexts/SupabaseAuthContext.tsx",
        "pages/auth/LoginPage.tsx",
        "pages/auth/TwoFactorSetupPage.tsx",
        "components/auth/LoginForm.tsx"
      ],
      "api_doc": {
        "openapi": "3.0.0",
        "info": {
          "title": "Authentication API",
          "version": "1.0.0",
          "description": "User authentication and authorization system"
        },
        "paths": {
          "/api/auth/login": {
            "post": {
              "summary": "User login",
              "requestBody": {
                "content": {
                  "application/json": {
                    "schema": {
                      "type": "object",
                      "properties": {
                        "email": {
                          "type": "string"
                        },
                        "password": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              },
              "responses": {
                "200": {
                  "description": "Login successful",
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "object",
                        "properties": {
                          "user": {
                            "$ref": "#/components/schemas/User"
                          },
                          "token": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    {
      "name": "Payment Processing API",
      "description": "Multi-provider payment system supporting Mercado Pago, Stripe, Asaas, and PIX with Brazilian compliance",
      "files": [
        "services/payment/paymentService.ts",
        "services/payment/mercadopagoService.ts",
        "services/payment/stripeService.ts",
        "services/payment/asaasService.ts",
        "components/payment/PaymentForm.tsx"
      ],
      "api_doc": {
        "openapi": "3.0.0",
        "info": {
          "title": "Payment Processing API",
          "version": "1.0.0",
          "description": "Multi-provider payment processing system"
        },
        "paths": {
          "/api/payments/process": {
            "post": {
              "summary": "Process payment",
              "requestBody": {
                "content": {
                  "application/json": {
                    "schema": {
                      "type": "object",
                      "properties": {
                        "amount": {
                          "type": "number"
                        },
                        "provider": {
                          "type": "string"
                        },
                        "paymentMethod": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              },
              "responses": {
                "200": {
                  "description": "Payment processed successfully"
                }
              }
            }
          }
        }
      }
    },
    {
      "name": "Reports & Analytics API",
      "description": "Comprehensive reporting system with financial, clinical, and operational analytics",
      "files": [
        "pages/ReportsPage.tsx",
        "components/reports/FinancialReport.tsx",
        "components/reports/PatientReport.tsx",
        "components/reports/ClinicalReport.tsx",
        "services/monitoring/apmService.ts"
      ],
      "api_doc": {
        "openapi": "3.0.0",
        "info": {
          "title": "Reports & Analytics API",
          "version": "1.0.0",
          "description": "Comprehensive reporting and analytics system"
        },
        "paths": {
          "/api/reports/financial": {
            "get": {
              "summary": "Get financial reports",
              "parameters": [
                {
                  "name": "startDate",
                  "in": "query",
                  "schema": {
                    "type": "string",
                    "format": "date"
                  }
                },
                {
                  "name": "endDate",
                  "in": "query",
                  "schema": {
                    "type": "string",
                    "format": "date"
                  }
                }
              ],
              "responses": {
                "200": {
                  "description": "Financial report data",
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "object",
                        "properties": {
                          "revenue": {
                            "type": "number"
                          },
                          "expenses": {
                            "type": "number"
                          },
                          "profit": {
                            "type": "number"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    {
      "name": "LGPD Compliance API",
      "description": "LGPD compliance system with data portability, deletion requests, and audit trails",
      "files": [
        "services/compliance/lgpdService.ts",
        "components/compliance/LGPDDashboard.tsx",
        "components/compliance/DataPortabilityRequest.tsx"
      ],
      "api_doc": {
        "openapi": "3.0.0",
        "info": {
          "title": "LGPD Compliance API",
          "version": "1.0.0",
          "description": "LGPD compliance and data protection system"
        },
        "paths": {
          "/api/lgpd/data-portability": {
            "post": {
              "summary": "Request data portability",
              "requestBody": {
                "content": {
                  "application/json": {
                    "schema": {
                      "type": "object",
                      "properties": {
                        "userId": {
                          "type": "string"
                        },
                        "requestType": {
                          "type": "string"
                        },
                        "format": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              },
              "responses": {
                "200": {
                  "description": "Data portability request created"
                }
              }
            }
          }
        }
      }
    }
  ]
}