{
  "meta": {
    "project": "DuduFisio-AI",
    "date": "2025-09-13",
    "prepared_by": "Software Development Manager"
  },
  "product_overview": "DuduFisio-AI is an integrated management system tailored for physiotherapy clinics, combining traditional clinical management capabilities with advanced Artificial Intelligence to optimize patient care, clinical documentation, and operational efficiency.",
  "core_goals": [
    "Digitize and automate physiotherapy clinical processes",
    "Enhance the quality of clinical documentation using AI",
    "Increase operational efficiency and patient satisfaction"
  ],
  "key_features": [
    "Comprehensive Patient Management with CRUD, medical history, interactive body map, and advanced search",
    "Advanced Appointment Scheduling with conflict detection, recurrence, notifications, and multi-therapist support",
    "Rich Clinical Documentation (SOAP) with a rich-text editor, auto-save, version control, and AI-generated reports",
    "AI Assistant providing automatic report generation, treatment protocol suggestions, risk analysis, clinical queries, and economic insights",
    "Exercise Library categorized by specialty with rich media and personalized prescription",
    "Patient Portal for secure access to personal data, prescribed exercises, scheduling, and communication",
    "Dashboard and Reports featuring operational metrics, financial indicators, clinical analytics, and export capabilities",
    "Financial Management supporting multiple payment methods including PIX, with revenue and delinquency tracking",
    "Inventory Management with stock control, alerts, and movement tracking",
    "Task Management system with prioritization, progress tracking, and notifications"
  ],
  "user_flow_summary": [
    "Administrator logs in and accesses a 360Â° dashboard with financial and operational controls",
    "Physiotherapist manages patient records, documents clinical notes, schedules and conducts appointments, and leverages AI assistance",
    "Intern views patient data and appointments with restricted permissions for observation and learning",
    "Patient securely logs into portal to view their medical records, prescribed exercises, appointment schedules, and communicates with the clinic",
    "User accesses appointment scheduling interface to create, view, or modify appointments with conflict prevention and notifications",
    "Users interact with AI assistant to generate reports and receive clinical and financial insights",
    "Administrators generate and review reports and analytics to monitor clinic performance and financial status",
    "Users perform financial transactions via multi-provider payment integrations"
  ],
  "validation_criteria": [
    "Successful CRUD operations on patients with validation and history persistence",
    "Appointment scheduling handles recurrence and prevents conflicts effectively",
    "Rich-text editor for clinical notes supports auto-save and version history",
    "AI assistant returns accurate and timely clinical and financial recommendations",
    "User authentication and role-based access control enforce permissions and security",
    "Patient portal securely delivers personalized medical data and scheduling",
    "Financial transactions processed successfully via integrated payment providers",
    "Data handled in compliance with LGPD including consent management and audit trails",
    "Application performance meets requirements for load times, responsiveness, and concurrent users",
    "Error handling and logging functionalities capture and report issues reliably"
  ],
  "code_summary": {
    "tech_stack": [
      "TypeScript",
      "React 19",
      "Vite",
      "Supabase",
      "TailwindCSS",
      "shadcn/ui",
      "Google Gemini AI",
      "React Router DOM",
      "React Hook Form",
      "Zod",
      "Framer Motion",
      "Recharts",
      "Lucide React",
      "WebRTC",
      "PWA"
    ],
    "features": [
      {
        "name": "Patient Management API",
        "description": "Comprehensive patient management system with CRUD operations, medical history tracking, and patient portal access",
        "files": [
          "services/patientService.ts",
          "services/supabase/patientService.ts",
          "services/supabase/patientServiceSupabase.ts",
          "pages/PatientListPage.tsx",
          "pages/PatientDetailPage.tsx",
          "pages/PatientFormPage.tsx",
          "components/patient/PatientCard.tsx",
          "components/PatientFormModal.tsx"
        ],
        "api_doc": {
          "openapi": "3.0.0",
          "info": {
            "title": "Patient Management API",
            "version": "1.0.0",
            "description": "API for managing patients in the fisiotherapy clinic system"
          },
          "paths": {
            "/api/patients": {
              "get": {
                "summary": "Get all patients",
                "responses": {
                  "200": {
                    "description": "List of patients",
                    "content": {
                      "application/json": {
                        "schema": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/Patient"
                          }
                        }
                      }
                    }
                  }
                }
              },
              "post": {
                "summary": "Create new patient",
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/Patient"
                      }
                    }
                  }
                },
                "responses": {
                  "201": {
                    "description": "Patient created successfully"
                  }
                }
              }
            },
            "/api/patients/{id}": {
              "get": {
                "summary": "Get patient by ID",
                "parameters": [
                  {
                    "name": "id",
                    "in": "path",
                    "required": true,
                    "schema": {
                      "type": "string"
                    }
                  }
                ],
                "responses": {
                  "200": {
                    "description": "Patient details",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/Patient"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "components": {
            "schemas": {
              "Patient": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "string"
                  },
                  "name": {
                    "type": "string"
                  },
                  "email": {
                    "type": "string",
                    "format": "email"
                  },
                  "phone": {
                    "type": "string"
                  },
                  "birthDate": {
                    "type": "string",
                    "format": "date"
                  },
                  "medicalHistory": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      },
      {
        "name": "Appointment Scheduling API",
        "description": "Advanced appointment scheduling system with conflict detection, recurrence support, and real-time updates",
        "files": [
          "services/appointmentService.ts",
          "services/supabase/appointmentService.ts",
          "services/supabase/appointmentServiceSupabase.ts",
          "services/scheduling/conflictDetection.ts",
          "services/scheduling/recurrenceService.ts",
          "services/schedulingRulesEngine.ts",
          "components/agenda/AppointmentCalendar.tsx",
          "components/agenda/AppointmentForm.tsx",
          "components/AppointmentFormModal.tsx",
          "components/AppointmentCard.tsx"
        ],
        "api_doc": {
          "openapi": "3.0.0",
          "info": {
            "title": "Appointment Scheduling API",
            "version": "1.0.0",
            "description": "API for managing appointments and scheduling in the fisiotherapy clinic"
          },
          "paths": {
            "/api/appointments": {
              "get": {
                "summary": "Get appointments",
                "parameters": [
                  {
                    "name": "date",
                    "in": "query",
                    "schema": {
                      "type": "string",
                      "format": "date"
                    }
                  },
                  {
                    "name": "therapistId",
                    "in": "query",
                    "schema": {
                      "type": "string"
                    }
                  }
                ],
                "responses": {
                  "200": {
                    "description": "List of appointments",
                    "content": {
                      "application/json": {
                        "schema": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/Appointment"
                          }
                        }
                      }
                    }
                  }
                }
              },
              "post": {
                "summary": "Create new appointment",
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/Appointment"
                      }
                    }
                  }
                },
                "responses": {
                  "201": {
                    "description": "Appointment created successfully"
                  }
                }
              }
            }
          }
        }
      },
      {
        "name": "AI Integration API",
        "description": "Google Gemini AI integration for clinical decision support, multimodal analysis, and intelligent recommendations",
        "files": [
          "services/geminiService.ts",
          "services/ai/multimodalAiService.ts",
          "services/ai/aiOrchestratorService.ts",
          "services/ai/knowledgeService.ts",
          "services/ai-economica/aiService.ts",
          "services/ai-economica/premiumAccountManager.ts",
          "components/AiAssistant.tsx",
          "components/ProtocolSuggestionModal.tsx"
        ],
        "api_doc": {
          "openapi": "3.0.0",
          "info": {
            "title": "AI Integration API",
            "version": "1.0.0",
            "description": "API for AI-powered features including clinical decision support and multimodal analysis"
          },
          "paths": {
            "/api/ai/analyze": {
              "post": {
                "summary": "Analyze clinical data with AI",
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "object",
                        "properties": {
                          "type": {
                            "type": "string",
                            "enum": [
                              "posture",
                              "movement",
                              "xray",
                              "general"
                            ]
                          },
                          "data": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                },
                "responses": {
                  "200": {
                    "description": "AI analysis result",
                    "content": {
                      "application/json": {
                        "schema": {
                          "type": "object",
                          "properties": {
                            "analysis": {
                              "type": "string"
                            },
                            "recommendations": {
                              "type": "array",
                              "items": {
                                "type": "string"
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      {
        "name": "Authentication & Authorization API",
        "description": "Supabase-based authentication with role-based access control, 2FA support, and LGPD compliance",
        "files": [
          "services/auth/supabaseAuthService.ts",
          "services/auth/authService.ts",
          "contexts/SupabaseAuthContext.tsx",
          "contexts/AuthContext.tsx",
          "pages/auth/LoginPage.tsx",
          "pages/auth/TwoFactorSetupPage.tsx",
          "components/auth/LoginForm.tsx",
          "components/ProtectedRoute.tsx",
          "components/RoleGuard.tsx"
        ],
        "api_doc": {
          "openapi": "3.0.0",
          "info": {
            "title": "Authentication API",
            "version": "1.0.0",
            "description": "API for user authentication and authorization with role-based access control"
          },
          "paths": {
            "/api/auth/login": {
              "post": {
                "summary": "User login",
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "object",
                        "properties": {
                          "email": {
                            "type": "string",
                            "format": "email"
                          },
                          "password": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                },
                "responses": {
                  "200": {
                    "description": "Login successful",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/User"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      {
        "name": "Payment Processing API",
        "description": "Multi-provider payment processing with Stripe, Mercado Pago, and PIX integration",
        "files": [
          "services/payment/paymentService.ts",
          "services/financialService.ts",
          "components/financial/PaymentForm.tsx",
          "components/financial/InvoiceGenerator.tsx"
        ],
        "api_doc": {
          "openapi": "3.0.0",
          "info": {
            "title": "Payment Processing API",
            "version": "1.0.0",
            "description": "API for processing payments through multiple providers"
          },
          "paths": {
            "/api/payments": {
              "post": {
                "summary": "Process payment",
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "object",
                        "properties": {
                          "amount": {
                            "type": "number"
                          },
                          "provider": {
                            "type": "string",
                            "enum": [
                              "stripe",
                              "mercadopago",
                              "pix"
                            ]
                          }
                        }
                      }
                    }
                  }
                },
                "responses": {
                  "200": {
                    "description": "Payment processed successfully"
                  }
                }
              }
            }
          }
        }
      },
      {
        "name": "Teleconsultation API",
        "description": "WebRTC-based teleconsultation system for remote patient consultations",
        "files": [
          "services/teleconsulta/webrtcTeleconsultaService.ts",
          "components/teleconsulta/TeleconsultaRoom.tsx",
          "components/teleconsulta/VideoCallInterface.tsx"
        ],
        "api_doc": {
          "openapi": "3.0.0",
          "info": {
            "title": "Teleconsultation API",
            "version": "1.0.0",
            "description": "API for WebRTC-based teleconsultation services"
          },
          "paths": {
            "/api/teleconsulta/session": {
              "post": {
                "summary": "Create teleconsultation session",
                "responses": {
                  "200": {
                    "description": "Session created successfully",
                    "content": {
                      "application/json": {
                        "schema": {
                          "type": "object",
                          "properties": {
                            "sessionId": {
                              "type": "string"
                            },
                            "token": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      {
        "name": "LGPD Compliance API",
        "description": "LGPD compliance service for data processing purposes, consent management, and audit trails",
        "files": [
          "services/compliance/lgpdService.ts",
          "components/compliance/ConsentManager.tsx"
        ],
        "api_doc": {
          "openapi": "3.0.0",
          "info": {
            "title": "LGPD Compliance API",
            "version": "1.0.0",
            "description": "API for LGPD compliance and data protection"
          },
          "paths": {
            "/api/compliance/consent": {
              "post": {
                "summary": "Record user consent",
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "object",
                        "properties": {
                          "purpose": {
                            "type": "string"
                          },
                          "consent": {
                            "type": "boolean"
                          }
                        }
                      }
                    }
                  }
                },
                "responses": {
                  "200": {
                    "description": "Consent recorded successfully"
                  }
                }
              }
            }
          }
        }
      },
      {
        "name": "Monitoring & APM API",
        "description": "Application Performance Monitoring with real-time metrics, error tracking, and business intelligence",
        "files": [
          "services/monitoring/apmService.ts",
          "services/analytics/advancedAnalyticsService.ts",
          "components/analytics/DashboardMetrics.tsx",
          "components/analytics/PerformanceChart.tsx"
        ],
        "api_doc": {
          "openapi": "3.0.0",
          "info": {
            "title": "Monitoring & APM API",
            "version": "1.0.0",
            "description": "API for application monitoring and analytics"
          },
          "paths": {
            "/api/monitoring/metrics": {
              "get": {
                "summary": "Get application metrics",
                "responses": {
                  "200": {
                    "description": "Application metrics",
                    "content": {
                      "application/json": {
                        "schema": {
                          "type": "object",
                          "properties": {
                            "performance": {
                              "type": "object"
                            },
                            "errors": {
                              "type": "object"
                            },
                            "business": {
                              "type": "object"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    ]
  }
}
